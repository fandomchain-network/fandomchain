// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fandomchain/tokenfactory/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetDenomRequest defines the QueryGetDenomRequest message.
type QueryGetDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetDenomRequest) Reset()         { *m = QueryGetDenomRequest{} }
func (m *QueryGetDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDenomRequest) ProtoMessage()    {}
func (*QueryGetDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{2}
}
func (m *QueryGetDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDenomRequest.Merge(m, src)
}
func (m *QueryGetDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDenomRequest proto.InternalMessageInfo

func (m *QueryGetDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetDenomResponse defines the QueryGetDenomResponse message.
type QueryGetDenomResponse struct {
	Denom Denom `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom"`
}

func (m *QueryGetDenomResponse) Reset()         { *m = QueryGetDenomResponse{} }
func (m *QueryGetDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDenomResponse) ProtoMessage()    {}
func (*QueryGetDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{3}
}
func (m *QueryGetDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDenomResponse.Merge(m, src)
}
func (m *QueryGetDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDenomResponse proto.InternalMessageInfo

func (m *QueryGetDenomResponse) GetDenom() Denom {
	if m != nil {
		return m.Denom
	}
	return Denom{}
}

// QueryAllDenomRequest defines the QueryAllDenomRequest message.
type QueryAllDenomRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDenomRequest) Reset()         { *m = QueryAllDenomRequest{} }
func (m *QueryAllDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDenomRequest) ProtoMessage()    {}
func (*QueryAllDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{4}
}
func (m *QueryAllDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDenomRequest.Merge(m, src)
}
func (m *QueryAllDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDenomRequest proto.InternalMessageInfo

func (m *QueryAllDenomRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllDenomResponse defines the QueryAllDenomResponse message.
type QueryAllDenomResponse struct {
	Denom      []Denom             `protobuf:"bytes,1,rep,name=denom,proto3" json:"denom"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDenomResponse) Reset()         { *m = QueryAllDenomResponse{} }
func (m *QueryAllDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDenomResponse) ProtoMessage()    {}
func (*QueryAllDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{5}
}
func (m *QueryAllDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDenomResponse.Merge(m, src)
}
func (m *QueryAllDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDenomResponse proto.InternalMessageInfo

func (m *QueryAllDenomResponse) GetDenom() []Denom {
	if m != nil {
		return m.Denom
	}
	return nil
}

func (m *QueryAllDenomResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetBondingCurvePriceRequest defines the request for getting bonding curve price
type QueryGetBondingCurvePriceRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetBondingCurvePriceRequest) Reset()         { *m = QueryGetBondingCurvePriceRequest{} }
func (m *QueryGetBondingCurvePriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondingCurvePriceRequest) ProtoMessage()    {}
func (*QueryGetBondingCurvePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{6}
}
func (m *QueryGetBondingCurvePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondingCurvePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondingCurvePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondingCurvePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondingCurvePriceRequest.Merge(m, src)
}
func (m *QueryGetBondingCurvePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondingCurvePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondingCurvePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondingCurvePriceRequest proto.InternalMessageInfo

func (m *QueryGetBondingCurvePriceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetBondingCurvePriceResponse defines the response for bonding curve price
type QueryGetBondingCurvePriceResponse struct {
	Price string `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *QueryGetBondingCurvePriceResponse) Reset()         { *m = QueryGetBondingCurvePriceResponse{} }
func (m *QueryGetBondingCurvePriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondingCurvePriceResponse) ProtoMessage()    {}
func (*QueryGetBondingCurvePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{7}
}
func (m *QueryGetBondingCurvePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondingCurvePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondingCurvePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondingCurvePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondingCurvePriceResponse.Merge(m, src)
}
func (m *QueryGetBondingCurvePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondingCurvePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondingCurvePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondingCurvePriceResponse proto.InternalMessageInfo

func (m *QueryGetBondingCurvePriceResponse) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

// QueryGetBondingCurveProgressRequest defines the request for bonding curve progress
type QueryGetBondingCurveProgressRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetBondingCurveProgressRequest) Reset()         { *m = QueryGetBondingCurveProgressRequest{} }
func (m *QueryGetBondingCurveProgressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondingCurveProgressRequest) ProtoMessage()    {}
func (*QueryGetBondingCurveProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{8}
}
func (m *QueryGetBondingCurveProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondingCurveProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondingCurveProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondingCurveProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondingCurveProgressRequest.Merge(m, src)
}
func (m *QueryGetBondingCurveProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondingCurveProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondingCurveProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondingCurveProgressRequest proto.InternalMessageInfo

func (m *QueryGetBondingCurveProgressRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetBondingCurveProgressResponse defines the response for bonding curve progress
type QueryGetBondingCurveProgressResponse struct {
	Progress        string `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	TokensSold      int64  `protobuf:"varint,2,opt,name=tokens_sold,json=tokensSold,proto3" json:"tokens_sold,omitempty"`
	TokensRemaining int64  `protobuf:"varint,3,opt,name=tokens_remaining,json=tokensRemaining,proto3" json:"tokens_remaining,omitempty"`
}

func (m *QueryGetBondingCurveProgressResponse) Reset()         { *m = QueryGetBondingCurveProgressResponse{} }
func (m *QueryGetBondingCurveProgressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBondingCurveProgressResponse) ProtoMessage()    {}
func (*QueryGetBondingCurveProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{9}
}
func (m *QueryGetBondingCurveProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBondingCurveProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBondingCurveProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBondingCurveProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBondingCurveProgressResponse.Merge(m, src)
}
func (m *QueryGetBondingCurveProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBondingCurveProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBondingCurveProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBondingCurveProgressResponse proto.InternalMessageInfo

func (m *QueryGetBondingCurveProgressResponse) GetProgress() string {
	if m != nil {
		return m.Progress
	}
	return ""
}

func (m *QueryGetBondingCurveProgressResponse) GetTokensSold() int64 {
	if m != nil {
		return m.TokensSold
	}
	return 0
}

func (m *QueryGetBondingCurveProgressResponse) GetTokensRemaining() int64 {
	if m != nil {
		return m.TokensRemaining
	}
	return 0
}

// QueryEstimateBuyRequest defines the request for estimating a buy
type QueryEstimateBuyRequest struct {
	Denom        string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	FandomAmount int64  `protobuf:"varint,2,opt,name=fandom_amount,json=fandomAmount,proto3" json:"fandom_amount,omitempty"`
}

func (m *QueryEstimateBuyRequest) Reset()         { *m = QueryEstimateBuyRequest{} }
func (m *QueryEstimateBuyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateBuyRequest) ProtoMessage()    {}
func (*QueryEstimateBuyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{10}
}
func (m *QueryEstimateBuyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateBuyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateBuyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateBuyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateBuyRequest.Merge(m, src)
}
func (m *QueryEstimateBuyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateBuyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateBuyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateBuyRequest proto.InternalMessageInfo

func (m *QueryEstimateBuyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEstimateBuyRequest) GetFandomAmount() int64 {
	if m != nil {
		return m.FandomAmount
	}
	return 0
}

// QueryEstimateBuyResponse defines the response for estimating a buy
type QueryEstimateBuyResponse struct {
	TokensOut   int64  `protobuf:"varint,1,opt,name=tokens_out,json=tokensOut,proto3" json:"tokens_out,omitempty"`
	PriceImpact string `protobuf:"bytes,2,opt,name=price_impact,json=priceImpact,proto3" json:"price_impact,omitempty"`
}

func (m *QueryEstimateBuyResponse) Reset()         { *m = QueryEstimateBuyResponse{} }
func (m *QueryEstimateBuyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateBuyResponse) ProtoMessage()    {}
func (*QueryEstimateBuyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{11}
}
func (m *QueryEstimateBuyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateBuyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateBuyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateBuyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateBuyResponse.Merge(m, src)
}
func (m *QueryEstimateBuyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateBuyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateBuyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateBuyResponse proto.InternalMessageInfo

func (m *QueryEstimateBuyResponse) GetTokensOut() int64 {
	if m != nil {
		return m.TokensOut
	}
	return 0
}

func (m *QueryEstimateBuyResponse) GetPriceImpact() string {
	if m != nil {
		return m.PriceImpact
	}
	return ""
}

// QueryEstimateSellRequest defines the request for estimating a sell
type QueryEstimateSellRequest struct {
	Denom       string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TokenAmount int64  `protobuf:"varint,2,opt,name=token_amount,json=tokenAmount,proto3" json:"token_amount,omitempty"`
}

func (m *QueryEstimateSellRequest) Reset()         { *m = QueryEstimateSellRequest{} }
func (m *QueryEstimateSellRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSellRequest) ProtoMessage()    {}
func (*QueryEstimateSellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{12}
}
func (m *QueryEstimateSellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSellRequest.Merge(m, src)
}
func (m *QueryEstimateSellRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSellRequest proto.InternalMessageInfo

func (m *QueryEstimateSellRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryEstimateSellRequest) GetTokenAmount() int64 {
	if m != nil {
		return m.TokenAmount
	}
	return 0
}

// QueryEstimateSellResponse defines the response for estimating a sell
type QueryEstimateSellResponse struct {
	FandomOut   int64  `protobuf:"varint,1,opt,name=fandom_out,json=fandomOut,proto3" json:"fandom_out,omitempty"`
	PriceImpact string `protobuf:"bytes,2,opt,name=price_impact,json=priceImpact,proto3" json:"price_impact,omitempty"`
}

func (m *QueryEstimateSellResponse) Reset()         { *m = QueryEstimateSellResponse{} }
func (m *QueryEstimateSellResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateSellResponse) ProtoMessage()    {}
func (*QueryEstimateSellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3df9ee0cb53f0c9, []int{13}
}
func (m *QueryEstimateSellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateSellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateSellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateSellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateSellResponse.Merge(m, src)
}
func (m *QueryEstimateSellResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateSellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateSellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateSellResponse proto.InternalMessageInfo

func (m *QueryEstimateSellResponse) GetFandomOut() int64 {
	if m != nil {
		return m.FandomOut
	}
	return 0
}

func (m *QueryEstimateSellResponse) GetPriceImpact() string {
	if m != nil {
		return m.PriceImpact
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fandomchain.tokenfactory.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fandomchain.tokenfactory.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetDenomRequest)(nil), "fandomchain.tokenfactory.v1.QueryGetDenomRequest")
	proto.RegisterType((*QueryGetDenomResponse)(nil), "fandomchain.tokenfactory.v1.QueryGetDenomResponse")
	proto.RegisterType((*QueryAllDenomRequest)(nil), "fandomchain.tokenfactory.v1.QueryAllDenomRequest")
	proto.RegisterType((*QueryAllDenomResponse)(nil), "fandomchain.tokenfactory.v1.QueryAllDenomResponse")
	proto.RegisterType((*QueryGetBondingCurvePriceRequest)(nil), "fandomchain.tokenfactory.v1.QueryGetBondingCurvePriceRequest")
	proto.RegisterType((*QueryGetBondingCurvePriceResponse)(nil), "fandomchain.tokenfactory.v1.QueryGetBondingCurvePriceResponse")
	proto.RegisterType((*QueryGetBondingCurveProgressRequest)(nil), "fandomchain.tokenfactory.v1.QueryGetBondingCurveProgressRequest")
	proto.RegisterType((*QueryGetBondingCurveProgressResponse)(nil), "fandomchain.tokenfactory.v1.QueryGetBondingCurveProgressResponse")
	proto.RegisterType((*QueryEstimateBuyRequest)(nil), "fandomchain.tokenfactory.v1.QueryEstimateBuyRequest")
	proto.RegisterType((*QueryEstimateBuyResponse)(nil), "fandomchain.tokenfactory.v1.QueryEstimateBuyResponse")
	proto.RegisterType((*QueryEstimateSellRequest)(nil), "fandomchain.tokenfactory.v1.QueryEstimateSellRequest")
	proto.RegisterType((*QueryEstimateSellResponse)(nil), "fandomchain.tokenfactory.v1.QueryEstimateSellResponse")
}

func init() {
	proto.RegisterFile("fandomchain/tokenfactory/v1/query.proto", fileDescriptor_e3df9ee0cb53f0c9)
}

var fileDescriptor_e3df9ee0cb53f0c9 = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x4d, 0x6b, 0x33, 0x55,
	0x14, 0xc7, 0x33, 0x4f, 0x6c, 0x79, 0x72, 0x12, 0x51, 0xaf, 0x91, 0xd6, 0x51, 0xd3, 0x76, 0x52,
	0x6d, 0x8d, 0x65, 0xc6, 0xc4, 0x17, 0x6a, 0x4b, 0x4b, 0x93, 0x68, 0x4b, 0x41, 0xb0, 0x4e, 0x05,
	0x41, 0xac, 0xe1, 0x26, 0xb9, 0x1d, 0x07, 0x67, 0xe6, 0x4e, 0xe7, 0x25, 0x18, 0x4a, 0x37, 0x7e,
	0x00, 0x11, 0xdc, 0xb8, 0x12, 0x37, 0x82, 0x4b, 0x3f, 0x81, 0x3b, 0xa1, 0xcb, 0x82, 0x0b, 0x5d,
	0x89, 0x34, 0x82, 0x5f, 0x43, 0x72, 0xef, 0x4d, 0x33, 0x93, 0xb4, 0x93, 0x97, 0x67, 0xd3, 0xce,
	0x1c, 0xce, 0xff, 0x7f, 0x7e, 0xff, 0x7b, 0xa7, 0x87, 0xc2, 0xc6, 0x39, 0x76, 0xda, 0xd4, 0x6e,
	0x7d, 0x89, 0x4d, 0x47, 0x0b, 0xe8, 0x57, 0xc4, 0x39, 0xc7, 0xad, 0x80, 0x7a, 0x5d, 0xad, 0x53,
	0xd6, 0x2e, 0x42, 0xe2, 0x75, 0x55, 0xd7, 0xa3, 0x01, 0x45, 0x2f, 0x45, 0x1a, 0xd5, 0x68, 0xa3,
	0xda, 0x29, 0xcb, 0xcf, 0x61, 0xdb, 0x74, 0xa8, 0xc6, 0x7e, 0xf2, 0x7e, 0xb9, 0xd4, 0xa2, 0xbe,
	0x4d, 0x7d, 0xad, 0x89, 0x7d, 0xc2, 0x8d, 0xb4, 0x4e, 0xb9, 0x49, 0x02, 0x5c, 0xd6, 0x5c, 0x6c,
	0x98, 0x0e, 0x0e, 0x4c, 0xea, 0x88, 0xde, 0x44, 0x88, 0x36, 0x71, 0xa8, 0x2d, 0x1a, 0x37, 0x93,
	0x1a, 0x5d, 0xec, 0x61, 0xdb, 0x17, 0x9d, 0x79, 0x83, 0x1a, 0x94, 0x3d, 0x6a, 0xfd, 0x27, 0x51,
	0x7d, 0xd9, 0xa0, 0xd4, 0xb0, 0x88, 0x86, 0x5d, 0x53, 0xc3, 0x8e, 0x43, 0x03, 0x46, 0x21, 0x34,
	0x4a, 0x1e, 0xd0, 0xc7, 0x7d, 0xd0, 0x13, 0x66, 0xa4, 0x93, 0x8b, 0x90, 0xf8, 0x81, 0x72, 0x06,
	0xcf, 0xc7, 0xaa, 0xbe, 0x4b, 0x1d, 0x9f, 0xa0, 0x43, 0x58, 0xe4, 0x03, 0x97, 0xa5, 0x55, 0x69,
	0x33, 0x5b, 0x29, 0xaa, 0x09, 0x07, 0xa4, 0x72, 0x71, 0x2d, 0x73, 0xfd, 0xf7, 0x4a, 0xea, 0x97,
	0xff, 0x7e, 0x2d, 0x49, 0xba, 0x50, 0x2b, 0x5b, 0x90, 0x67, 0xf6, 0x47, 0x24, 0x78, 0xbf, 0x9f,
	0x54, 0x8c, 0x45, 0x79, 0x58, 0x60, 0xc9, 0x99, 0x7d, 0x46, 0xe7, 0x2f, 0xca, 0xa7, 0xf0, 0xc2,
	0x48, 0xb7, 0xc0, 0xd9, 0x8f, 0xb6, 0x67, 0x2b, 0x4a, 0x22, 0x0d, 0x93, 0xd6, 0x9e, 0xea, 0xc3,
	0x0c, 0x8c, 0xbf, 0x10, 0x18, 0x55, 0xcb, 0x8a, 0x61, 0x1c, 0x02, 0x0c, 0xaf, 0x4b, 0x98, 0xbf,
	0xa6, 0xf2, 0xbb, 0x55, 0xfb, 0x77, 0xab, 0xf2, 0x8f, 0x44, 0xdc, 0xad, 0x7a, 0x82, 0x0d, 0x22,
	0xb4, 0x7a, 0x44, 0xa9, 0xfc, 0x24, 0x09, 0xf2, 0xe1, 0x80, 0x71, 0xf2, 0xf4, 0x1c, 0xe4, 0xe8,
	0x28, 0x46, 0xf8, 0x88, 0x11, 0x6e, 0x4c, 0x24, 0xe4, 0xc3, 0x63, 0x88, 0xdb, 0xb0, 0x3a, 0x38,
	0xdb, 0x1a, 0x75, 0xda, 0xa6, 0x63, 0xd4, 0x43, 0xaf, 0x43, 0x4e, 0x3c, 0xb3, 0x45, 0x92, 0x6f,
	0xe5, 0x3d, 0x58, 0x4b, 0x50, 0x8a, 0x9c, 0x79, 0x58, 0x70, 0xfb, 0x85, 0x81, 0x94, 0xbd, 0x28,
	0xbb, 0x50, 0xbc, 0x5f, 0x4a, 0x0d, 0x8f, 0xf8, 0x7e, 0xf2, 0xdc, 0x6f, 0x25, 0x58, 0x4f, 0x56,
	0x8b, 0xd9, 0x32, 0x3c, 0x76, 0x45, 0x4d, 0x38, 0xdc, 0xbd, 0xa3, 0x15, 0xc8, 0xb2, 0x53, 0xf6,
	0x1b, 0x3e, 0xb5, 0xda, 0xec, 0x00, 0xd3, 0x3a, 0xf0, 0xd2, 0x29, 0xb5, 0xda, 0xe8, 0x75, 0x78,
	0x56, 0x34, 0x78, 0xc4, 0xc6, 0xa6, 0x63, 0x3a, 0xc6, 0x72, 0x9a, 0x75, 0x3d, 0xc3, 0xeb, 0xfa,
	0xa0, 0xac, 0x7c, 0x02, 0x4b, 0x8c, 0xe7, 0x03, 0x3f, 0x30, 0x6d, 0x1c, 0x90, 0x5a, 0xd8, 0x4d,
	0x4c, 0x80, 0x8a, 0xf0, 0x34, 0xbf, 0xee, 0x06, 0xb6, 0x69, 0xe8, 0x04, 0x62, 0x7c, 0x8e, 0x17,
	0xab, 0xac, 0xa6, 0x7c, 0x0e, 0xcb, 0xe3, 0xae, 0x22, 0xd9, 0x2b, 0x20, 0x50, 0x1b, 0x34, 0x0c,
	0x98, 0x77, 0x5a, 0xcf, 0xf0, 0xca, 0x47, 0x61, 0x80, 0xd6, 0x20, 0xc7, 0xce, 0xb9, 0x61, 0xda,
	0x2e, 0x6e, 0x71, 0xfb, 0x8c, 0x9e, 0x65, 0xb5, 0x63, 0x56, 0x52, 0x4e, 0x47, 0xdc, 0x4f, 0x89,
	0x65, 0x25, 0x43, 0xaf, 0x41, 0x8e, 0x4d, 0x88, 0x33, 0xf3, 0x53, 0x14, 0xc8, 0x67, 0xf0, 0xe2,
	0x3d, 0xa6, 0x43, 0x66, 0x11, 0x3a, 0xc2, 0xcc, 0x2b, 0xd3, 0x31, 0x57, 0x7e, 0x03, 0x58, 0x60,
	0xfe, 0xe8, 0x07, 0x09, 0x16, 0xf9, 0x72, 0x41, 0x5a, 0xe2, 0x5f, 0xce, 0xf8, 0x66, 0x93, 0xdf,
	0x9c, 0x5e, 0xc0, 0xc9, 0x95, 0x37, 0xbe, 0xf9, 0xe3, 0xdf, 0xef, 0x1f, 0xbd, 0x8a, 0x8a, 0x1a,
	0x57, 0xd6, 0x13, 0x16, 0x31, 0xfa, 0x59, 0x82, 0xc7, 0x83, 0x3d, 0x85, 0xca, 0x93, 0x67, 0x8d,
	0x6c, 0x40, 0xb9, 0x32, 0x8b, 0x44, 0x00, 0x56, 0x18, 0xe0, 0x16, 0x2a, 0x25, 0x02, 0xb2, 0x6b,
	0xd4, 0x2e, 0xd9, 0xaf, 0x2b, 0xf4, 0xa3, 0x04, 0x99, 0x0f, 0x4d, 0x7f, 0x7a, 0xd0, 0x91, 0x1d,
	0x39, 0x0d, 0xe8, 0xe8, 0xd6, 0x53, 0x4a, 0x0c, 0x74, 0x1d, 0x29, 0x93, 0x41, 0xd1, 0x9f, 0x12,
	0xe4, 0xef, 0x5b, 0x2d, 0x68, 0x6f, 0xaa, 0x13, 0x7a, 0x68, 0x99, 0xc9, 0xfb, 0xf3, 0xca, 0x45,
	0x86, 0x03, 0x96, 0x61, 0x07, 0x6d, 0x27, 0x66, 0x68, 0x72, 0x7d, 0xa3, 0xd5, 0x37, 0x68, 0xb0,
	0xaf, 0xf8, 0xee, 0xe8, 0x7b, 0x12, 0x2c, 0x3d, 0xb0, 0xbb, 0xd0, 0xc1, 0x1c, 0x74, 0xb1, 0xa5,
	0x29, 0x57, 0x9f, 0xc0, 0x41, 0x44, 0xac, 0xb3, 0x88, 0x7b, 0x68, 0x77, 0xa6, 0x88, 0xdc, 0xe4,
	0x2e, 0xe5, 0xef, 0x12, 0x64, 0x23, 0xbb, 0x0b, 0xbd, 0x3d, 0x99, 0x6b, 0x7c, 0x81, 0xca, 0xef,
	0xcc, 0xa8, 0x12, 0x09, 0x8e, 0x59, 0x82, 0x3a, 0xaa, 0x26, 0x26, 0x20, 0x42, 0xd9, 0x68, 0x86,
	0xdd, 0x01, 0xb7, 0x76, 0x19, 0x5b, 0xcd, 0x57, 0xe8, 0x5a, 0x82, 0x5c, 0x74, 0xa1, 0xa1, 0x19,
	0x90, 0x22, 0x5b, 0x55, 0x7e, 0x77, 0x56, 0xd9, 0x7c, 0x51, 0x7c, 0x62, 0x59, 0xc3, 0x2c, 0xd1,
	0x8d, 0x7d, 0x55, 0xdb, 0xb9, 0xbe, 0x2d, 0x48, 0x37, 0xb7, 0x05, 0xe9, 0x9f, 0xdb, 0x82, 0xf4,
	0x5d, 0xaf, 0x90, 0xba, 0xe9, 0x15, 0x52, 0x7f, 0xf5, 0x0a, 0xa9, 0xcf, 0x56, 0xa3, 0xde, 0x5f,
	0xc7, 0xdd, 0x83, 0xae, 0x4b, 0xfc, 0xe6, 0x22, 0xfb, 0x6f, 0xf1, 0xad, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x91, 0xd7, 0x32, 0x59, 0x3b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListDenom Queries a list of Denom items.
	GetDenom(ctx context.Context, in *QueryGetDenomRequest, opts ...grpc.CallOption) (*QueryGetDenomResponse, error)
	// ListDenom defines the ListDenom RPC.
	ListDenom(ctx context.Context, in *QueryAllDenomRequest, opts ...grpc.CallOption) (*QueryAllDenomResponse, error)
	// GetBondingCurvePrice queries the current price of a denom in the bonding curve
	GetBondingCurvePrice(ctx context.Context, in *QueryGetBondingCurvePriceRequest, opts ...grpc.CallOption) (*QueryGetBondingCurvePriceResponse, error)
	// GetBondingCurveProgress queries the progress of a bonding curve
	GetBondingCurveProgress(ctx context.Context, in *QueryGetBondingCurveProgressRequest, opts ...grpc.CallOption) (*QueryGetBondingCurveProgressResponse, error)
	// EstimateBuy estimates how many tokens would be received for a given fandom amount
	EstimateBuy(ctx context.Context, in *QueryEstimateBuyRequest, opts ...grpc.CallOption) (*QueryEstimateBuyResponse, error)
	// EstimateSell estimates how many fandom tokens would be received for selling tokens
	EstimateSell(ctx context.Context, in *QueryEstimateSellRequest, opts ...grpc.CallOption) (*QueryEstimateSellResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDenom(ctx context.Context, in *QueryGetDenomRequest, opts ...grpc.CallOption) (*QueryGetDenomResponse, error) {
	out := new(QueryGetDenomResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/GetDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListDenom(ctx context.Context, in *QueryAllDenomRequest, opts ...grpc.CallOption) (*QueryAllDenomResponse, error) {
	out := new(QueryAllDenomResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/ListDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBondingCurvePrice(ctx context.Context, in *QueryGetBondingCurvePriceRequest, opts ...grpc.CallOption) (*QueryGetBondingCurvePriceResponse, error) {
	out := new(QueryGetBondingCurvePriceResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/GetBondingCurvePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBondingCurveProgress(ctx context.Context, in *QueryGetBondingCurveProgressRequest, opts ...grpc.CallOption) (*QueryGetBondingCurveProgressResponse, error) {
	out := new(QueryGetBondingCurveProgressResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/GetBondingCurveProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateBuy(ctx context.Context, in *QueryEstimateBuyRequest, opts ...grpc.CallOption) (*QueryEstimateBuyResponse, error) {
	out := new(QueryEstimateBuyResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/EstimateBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSell(ctx context.Context, in *QueryEstimateSellRequest, opts ...grpc.CallOption) (*QueryEstimateSellResponse, error) {
	out := new(QueryEstimateSellResponse)
	err := c.cc.Invoke(ctx, "/fandomchain.tokenfactory.v1.Query/EstimateSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListDenom Queries a list of Denom items.
	GetDenom(context.Context, *QueryGetDenomRequest) (*QueryGetDenomResponse, error)
	// ListDenom defines the ListDenom RPC.
	ListDenom(context.Context, *QueryAllDenomRequest) (*QueryAllDenomResponse, error)
	// GetBondingCurvePrice queries the current price of a denom in the bonding curve
	GetBondingCurvePrice(context.Context, *QueryGetBondingCurvePriceRequest) (*QueryGetBondingCurvePriceResponse, error)
	// GetBondingCurveProgress queries the progress of a bonding curve
	GetBondingCurveProgress(context.Context, *QueryGetBondingCurveProgressRequest) (*QueryGetBondingCurveProgressResponse, error)
	// EstimateBuy estimates how many tokens would be received for a given fandom amount
	EstimateBuy(context.Context, *QueryEstimateBuyRequest) (*QueryEstimateBuyResponse, error)
	// EstimateSell estimates how many fandom tokens would be received for selling tokens
	EstimateSell(context.Context, *QueryEstimateSellRequest) (*QueryEstimateSellResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetDenom(ctx context.Context, req *QueryGetDenomRequest) (*QueryGetDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDenom not implemented")
}
func (*UnimplementedQueryServer) ListDenom(ctx context.Context, req *QueryAllDenomRequest) (*QueryAllDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDenom not implemented")
}
func (*UnimplementedQueryServer) GetBondingCurvePrice(ctx context.Context, req *QueryGetBondingCurvePriceRequest) (*QueryGetBondingCurvePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBondingCurvePrice not implemented")
}
func (*UnimplementedQueryServer) GetBondingCurveProgress(ctx context.Context, req *QueryGetBondingCurveProgressRequest) (*QueryGetBondingCurveProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBondingCurveProgress not implemented")
}
func (*UnimplementedQueryServer) EstimateBuy(ctx context.Context, req *QueryEstimateBuyRequest) (*QueryEstimateBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateBuy not implemented")
}
func (*UnimplementedQueryServer) EstimateSell(ctx context.Context, req *QueryEstimateSellRequest) (*QueryEstimateSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSell not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/GetDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDenom(ctx, req.(*QueryGetDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/ListDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListDenom(ctx, req.(*QueryAllDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBondingCurvePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBondingCurvePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBondingCurvePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/GetBondingCurvePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBondingCurvePrice(ctx, req.(*QueryGetBondingCurvePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBondingCurveProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBondingCurveProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBondingCurveProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/GetBondingCurveProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBondingCurveProgress(ctx, req.(*QueryGetBondingCurveProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/EstimateBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateBuy(ctx, req.(*QueryEstimateBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fandomchain.tokenfactory.v1.Query/EstimateSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSell(ctx, req.(*QueryEstimateSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fandomchain.tokenfactory.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetDenom",
			Handler:    _Query_GetDenom_Handler,
		},
		{
			MethodName: "ListDenom",
			Handler:    _Query_ListDenom_Handler,
		},
		{
			MethodName: "GetBondingCurvePrice",
			Handler:    _Query_GetBondingCurvePrice_Handler,
		},
		{
			MethodName: "GetBondingCurveProgress",
			Handler:    _Query_GetBondingCurveProgress_Handler,
		},
		{
			MethodName: "EstimateBuy",
			Handler:    _Query_EstimateBuy_Handler,
		},
		{
			MethodName: "EstimateSell",
			Handler:    _Query_EstimateSell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fandomchain/tokenfactory/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		for iNdEx := len(m.Denom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Denom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondingCurvePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondingCurvePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondingCurvePriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondingCurvePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondingCurvePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondingCurvePriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondingCurveProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondingCurveProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondingCurveProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBondingCurveProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBondingCurveProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBondingCurveProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokensRemaining != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokensRemaining))
		i--
		dAtA[i] = 0x18
	}
	if m.TokensSold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokensSold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Progress) > 0 {
		i -= len(m.Progress)
		copy(dAtA[i:], m.Progress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Progress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateBuyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateBuyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateBuyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FandomAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FandomAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateBuyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateBuyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateBuyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceImpact) > 0 {
		i -= len(m.PriceImpact)
		copy(dAtA[i:], m.PriceImpact)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceImpact)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokensOut != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokensOut))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenAmount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateSellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateSellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateSellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceImpact) > 0 {
		i -= len(m.PriceImpact)
		copy(dAtA[i:], m.PriceImpact)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceImpact)))
		i--
		dAtA[i] = 0x12
	}
	if m.FandomOut != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FandomOut))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Denom.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denom) > 0 {
		for _, e := range m.Denom {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondingCurvePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondingCurvePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondingCurveProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBondingCurveProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Progress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TokensSold != 0 {
		n += 1 + sovQuery(uint64(m.TokensSold))
	}
	if m.TokensRemaining != 0 {
		n += 1 + sovQuery(uint64(m.TokensRemaining))
	}
	return n
}

func (m *QueryEstimateBuyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FandomAmount != 0 {
		n += 1 + sovQuery(uint64(m.FandomAmount))
	}
	return n
}

func (m *QueryEstimateBuyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokensOut != 0 {
		n += 1 + sovQuery(uint64(m.TokensOut))
	}
	l = len(m.PriceImpact)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateSellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TokenAmount != 0 {
		n += 1 + sovQuery(uint64(m.TokenAmount))
	}
	return n
}

func (m *QueryEstimateSellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FandomOut != 0 {
		n += 1 + sovQuery(uint64(m.FandomOut))
	}
	l = len(m.PriceImpact)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = append(m.Denom, Denom{})
			if err := m.Denom[len(m.Denom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondingCurvePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondingCurvePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondingCurvePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondingCurvePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondingCurvePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondingCurvePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondingCurveProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondingCurveProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondingCurveProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBondingCurveProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBondingCurveProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBondingCurveProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensSold", wireType)
			}
			m.TokensSold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokensSold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensRemaining", wireType)
			}
			m.TokensRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokensRemaining |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateBuyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateBuyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateBuyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FandomAmount", wireType)
			}
			m.FandomAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FandomAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateBuyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateBuyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateBuyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensOut", wireType)
			}
			m.TokensOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokensOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceImpact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceImpact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			m.TokenAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateSellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateSellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateSellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FandomOut", wireType)
			}
			m.FandomOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FandomOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceImpact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceImpact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
