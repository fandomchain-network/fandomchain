// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/epochs/v1beta1/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EpochInfo } from "./genesis";
export const protobufPackage = "cosmos.epochs.v1beta1";
function createBaseQueryEpochInfosRequest() {
    return {};
}
export const QueryEpochInfosRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEpochInfosRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryEpochInfosRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryEpochInfosRequest();
        return message;
    },
};
function createBaseQueryEpochInfosResponse() {
    return { epochs: [] };
}
export const QueryEpochInfosResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.epochs) {
            EpochInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEpochInfosResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.epochs.push(EpochInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochs: globalThis.Array.isArray(object?.epochs) ? object.epochs.map((e) => EpochInfo.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.epochs?.length) {
            obj.epochs = message.epochs.map((e) => EpochInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return QueryEpochInfosResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryEpochInfosResponse();
        message.epochs = object.epochs?.map((e) => EpochInfo.fromPartial(e)) || [];
        return message;
    },
};
function createBaseQueryCurrentEpochRequest() {
    return { identifier: "" };
}
export const QueryCurrentEpochRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCurrentEpochRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.identifier = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.identifier !== "") {
            obj.identifier = message.identifier;
        }
        return obj;
    },
    create(base) {
        return QueryCurrentEpochRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCurrentEpochRequest();
        message.identifier = object.identifier ?? "";
        return message;
    },
};
function createBaseQueryCurrentEpochResponse() {
    return { currentEpoch: 0 };
}
export const QueryCurrentEpochResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.currentEpoch !== 0) {
            writer.uint32(8).int64(message.currentEpoch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCurrentEpochResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.currentEpoch = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { currentEpoch: isSet(object.currentEpoch) ? globalThis.Number(object.currentEpoch) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.currentEpoch !== 0) {
            obj.currentEpoch = Math.round(message.currentEpoch);
        }
        return obj;
    },
    create(base) {
        return QueryCurrentEpochResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCurrentEpochResponse();
        message.currentEpoch = object.currentEpoch ?? 0;
        return message;
    },
};
export const QueryServiceName = "cosmos.epochs.v1beta1.Query";
export class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || QueryServiceName;
        this.rpc = rpc;
        this.EpochInfos = this.EpochInfos.bind(this);
        this.CurrentEpoch = this.CurrentEpoch.bind(this);
    }
    EpochInfos(request) {
        const data = QueryEpochInfosRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EpochInfos", data);
        return promise.then((data) => QueryEpochInfosResponse.decode(new BinaryReader(data)));
    }
    CurrentEpoch(request) {
        const data = QueryCurrentEpochRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CurrentEpoch", data);
        return promise.then((data) => QueryCurrentEpochResponse.decode(new BinaryReader(data)));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
