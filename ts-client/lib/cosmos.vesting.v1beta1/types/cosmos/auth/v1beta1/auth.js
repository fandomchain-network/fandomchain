// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/auth/v1beta1/auth.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../google/protobuf/any";
export const protobufPackage = "cosmos.auth.v1beta1";
function createBaseBaseAccount() {
    return { address: "", pubKey: undefined, accountNumber: Long.UZERO, sequence: Long.UZERO };
}
export const BaseAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.pubKey !== undefined) {
            Any.encode(message.pubKey, writer.uint32(18).fork()).join();
        }
        if (!message.accountNumber.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.accountNumber.toString());
        }
        if (!message.sequence.equals(Long.UZERO)) {
            writer.uint32(32).uint64(message.sequence.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBaseAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pubKey = Any.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.accountNumber = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.sequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            pubKey: isSet(object.pubKey) ? Any.fromJSON(object.pubKey) : undefined,
            accountNumber: isSet(object.accountNumber) ? Long.fromValue(object.accountNumber) : Long.UZERO,
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.pubKey !== undefined) {
            obj.pubKey = Any.toJSON(message.pubKey);
        }
        if (!message.accountNumber.equals(Long.UZERO)) {
            obj.accountNumber = (message.accountNumber || Long.UZERO).toString();
        }
        if (!message.sequence.equals(Long.UZERO)) {
            obj.sequence = (message.sequence || Long.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return BaseAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBaseAccount();
        message.address = object.address ?? "";
        message.pubKey = (object.pubKey !== undefined && object.pubKey !== null)
            ? Any.fromPartial(object.pubKey)
            : undefined;
        message.accountNumber = (object.accountNumber !== undefined && object.accountNumber !== null)
            ? Long.fromValue(object.accountNumber)
            : Long.UZERO;
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        return message;
    },
};
function createBaseModuleAccount() {
    return { baseAccount: undefined, name: "", permissions: [] };
}
export const ModuleAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseAccount !== undefined) {
            BaseAccount.encode(message.baseAccount, writer.uint32(10).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.permissions) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseAccount = BaseAccount.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.permissions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseAccount: isSet(object.baseAccount) ? BaseAccount.fromJSON(object.baseAccount) : undefined,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            permissions: globalThis.Array.isArray(object?.permissions)
                ? object.permissions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseAccount !== undefined) {
            obj.baseAccount = BaseAccount.toJSON(message.baseAccount);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.permissions?.length) {
            obj.permissions = message.permissions;
        }
        return obj;
    },
    create(base) {
        return ModuleAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModuleAccount();
        message.baseAccount = (object.baseAccount !== undefined && object.baseAccount !== null)
            ? BaseAccount.fromPartial(object.baseAccount)
            : undefined;
        message.name = object.name ?? "";
        message.permissions = object.permissions?.map((e) => e) || [];
        return message;
    },
};
function createBaseModuleCredential() {
    return { moduleName: "", derivationKeys: [] };
}
export const ModuleCredential = {
    encode(message, writer = new BinaryWriter()) {
        if (message.moduleName !== "") {
            writer.uint32(10).string(message.moduleName);
        }
        for (const v of message.derivationKeys) {
            writer.uint32(18).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleCredential();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.moduleName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.derivationKeys.push(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
            derivationKeys: globalThis.Array.isArray(object?.derivationKeys)
                ? object.derivationKeys.map((e) => bytesFromBase64(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleName !== "") {
            obj.moduleName = message.moduleName;
        }
        if (message.derivationKeys?.length) {
            obj.derivationKeys = message.derivationKeys.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return ModuleCredential.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModuleCredential();
        message.moduleName = object.moduleName ?? "";
        message.derivationKeys = object.derivationKeys?.map((e) => e) || [];
        return message;
    },
};
function createBaseParams() {
    return {
        maxMemoCharacters: Long.UZERO,
        txSigLimit: Long.UZERO,
        txSizeCostPerByte: Long.UZERO,
        sigVerifyCostEd25519: Long.UZERO,
        sigVerifyCostSecp256k1: Long.UZERO,
    };
}
export const Params = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.maxMemoCharacters.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.maxMemoCharacters.toString());
        }
        if (!message.txSigLimit.equals(Long.UZERO)) {
            writer.uint32(16).uint64(message.txSigLimit.toString());
        }
        if (!message.txSizeCostPerByte.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.txSizeCostPerByte.toString());
        }
        if (!message.sigVerifyCostEd25519.equals(Long.UZERO)) {
            writer.uint32(32).uint64(message.sigVerifyCostEd25519.toString());
        }
        if (!message.sigVerifyCostSecp256k1.equals(Long.UZERO)) {
            writer.uint32(40).uint64(message.sigVerifyCostSecp256k1.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.maxMemoCharacters = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.txSigLimit = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.txSizeCostPerByte = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.sigVerifyCostEd25519 = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sigVerifyCostSecp256k1 = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxMemoCharacters: isSet(object.maxMemoCharacters) ? Long.fromValue(object.maxMemoCharacters) : Long.UZERO,
            txSigLimit: isSet(object.txSigLimit) ? Long.fromValue(object.txSigLimit) : Long.UZERO,
            txSizeCostPerByte: isSet(object.txSizeCostPerByte) ? Long.fromValue(object.txSizeCostPerByte) : Long.UZERO,
            sigVerifyCostEd25519: isSet(object.sigVerifyCostEd25519)
                ? Long.fromValue(object.sigVerifyCostEd25519)
                : Long.UZERO,
            sigVerifyCostSecp256k1: isSet(object.sigVerifyCostSecp256k1)
                ? Long.fromValue(object.sigVerifyCostSecp256k1)
                : Long.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.maxMemoCharacters.equals(Long.UZERO)) {
            obj.maxMemoCharacters = (message.maxMemoCharacters || Long.UZERO).toString();
        }
        if (!message.txSigLimit.equals(Long.UZERO)) {
            obj.txSigLimit = (message.txSigLimit || Long.UZERO).toString();
        }
        if (!message.txSizeCostPerByte.equals(Long.UZERO)) {
            obj.txSizeCostPerByte = (message.txSizeCostPerByte || Long.UZERO).toString();
        }
        if (!message.sigVerifyCostEd25519.equals(Long.UZERO)) {
            obj.sigVerifyCostEd25519 = (message.sigVerifyCostEd25519 || Long.UZERO).toString();
        }
        if (!message.sigVerifyCostSecp256k1.equals(Long.UZERO)) {
            obj.sigVerifyCostSecp256k1 = (message.sigVerifyCostSecp256k1 || Long.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return Params.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.maxMemoCharacters = (object.maxMemoCharacters !== undefined && object.maxMemoCharacters !== null)
            ? Long.fromValue(object.maxMemoCharacters)
            : Long.UZERO;
        message.txSigLimit = (object.txSigLimit !== undefined && object.txSigLimit !== null)
            ? Long.fromValue(object.txSigLimit)
            : Long.UZERO;
        message.txSizeCostPerByte = (object.txSizeCostPerByte !== undefined && object.txSizeCostPerByte !== null)
            ? Long.fromValue(object.txSizeCostPerByte)
            : Long.UZERO;
        message.sigVerifyCostEd25519 = (object.sigVerifyCostEd25519 !== undefined && object.sigVerifyCostEd25519 !== null)
            ? Long.fromValue(object.sigVerifyCostEd25519)
            : Long.UZERO;
        message.sigVerifyCostSecp256k1 =
            (object.sigVerifyCostSecp256k1 !== undefined && object.sigVerifyCostSecp256k1 !== null)
                ? Long.fromValue(object.sigVerifyCostSecp256k1)
                : Long.UZERO;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
