// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/vesting/v1beta1/vesting.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { BaseAccount } from "../../auth/v1beta1/auth";
import { Coin } from "../../base/v1beta1/coin";
export const protobufPackage = "cosmos.vesting.v1beta1";
function createBaseBaseVestingAccount() {
    return { baseAccount: undefined, originalVesting: [], delegatedFree: [], delegatedVesting: [], endTime: Long.ZERO };
}
export const BaseVestingAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseAccount !== undefined) {
            BaseAccount.encode(message.baseAccount, writer.uint32(10).fork()).join();
        }
        for (const v of message.originalVesting) {
            Coin.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.delegatedFree) {
            Coin.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.delegatedVesting) {
            Coin.encode(v, writer.uint32(34).fork()).join();
        }
        if (!message.endTime.equals(Long.ZERO)) {
            writer.uint32(40).int64(message.endTime.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBaseVestingAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseAccount = BaseAccount.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.originalVesting.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.delegatedFree.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.delegatedVesting.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.endTime = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseAccount: isSet(object.baseAccount) ? BaseAccount.fromJSON(object.baseAccount) : undefined,
            originalVesting: globalThis.Array.isArray(object?.originalVesting)
                ? object.originalVesting.map((e) => Coin.fromJSON(e))
                : [],
            delegatedFree: globalThis.Array.isArray(object?.delegatedFree)
                ? object.delegatedFree.map((e) => Coin.fromJSON(e))
                : [],
            delegatedVesting: globalThis.Array.isArray(object?.delegatedVesting)
                ? object.delegatedVesting.map((e) => Coin.fromJSON(e))
                : [],
            endTime: isSet(object.endTime) ? Long.fromValue(object.endTime) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseAccount !== undefined) {
            obj.baseAccount = BaseAccount.toJSON(message.baseAccount);
        }
        if (message.originalVesting?.length) {
            obj.originalVesting = message.originalVesting.map((e) => Coin.toJSON(e));
        }
        if (message.delegatedFree?.length) {
            obj.delegatedFree = message.delegatedFree.map((e) => Coin.toJSON(e));
        }
        if (message.delegatedVesting?.length) {
            obj.delegatedVesting = message.delegatedVesting.map((e) => Coin.toJSON(e));
        }
        if (!message.endTime.equals(Long.ZERO)) {
            obj.endTime = (message.endTime || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return BaseVestingAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBaseVestingAccount();
        message.baseAccount = (object.baseAccount !== undefined && object.baseAccount !== null)
            ? BaseAccount.fromPartial(object.baseAccount)
            : undefined;
        message.originalVesting = object.originalVesting?.map((e) => Coin.fromPartial(e)) || [];
        message.delegatedFree = object.delegatedFree?.map((e) => Coin.fromPartial(e)) || [];
        message.delegatedVesting = object.delegatedVesting?.map((e) => Coin.fromPartial(e)) || [];
        message.endTime = (object.endTime !== undefined && object.endTime !== null)
            ? Long.fromValue(object.endTime)
            : Long.ZERO;
        return message;
    },
};
function createBaseContinuousVestingAccount() {
    return { baseVestingAccount: undefined, startTime: Long.ZERO };
}
export const ContinuousVestingAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseVestingAccount !== undefined) {
            BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).join();
        }
        if (!message.startTime.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.startTime.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContinuousVestingAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseVestingAccount = BaseVestingAccount.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startTime = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseVestingAccount: isSet(object.baseVestingAccount)
                ? BaseVestingAccount.fromJSON(object.baseVestingAccount)
                : undefined,
            startTime: isSet(object.startTime) ? Long.fromValue(object.startTime) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseVestingAccount !== undefined) {
            obj.baseVestingAccount = BaseVestingAccount.toJSON(message.baseVestingAccount);
        }
        if (!message.startTime.equals(Long.ZERO)) {
            obj.startTime = (message.startTime || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return ContinuousVestingAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseContinuousVestingAccount();
        message.baseVestingAccount = (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null)
            ? BaseVestingAccount.fromPartial(object.baseVestingAccount)
            : undefined;
        message.startTime = (object.startTime !== undefined && object.startTime !== null)
            ? Long.fromValue(object.startTime)
            : Long.ZERO;
        return message;
    },
};
function createBaseDelayedVestingAccount() {
    return { baseVestingAccount: undefined };
}
export const DelayedVestingAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseVestingAccount !== undefined) {
            BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDelayedVestingAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseVestingAccount = BaseVestingAccount.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseVestingAccount: isSet(object.baseVestingAccount)
                ? BaseVestingAccount.fromJSON(object.baseVestingAccount)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseVestingAccount !== undefined) {
            obj.baseVestingAccount = BaseVestingAccount.toJSON(message.baseVestingAccount);
        }
        return obj;
    },
    create(base) {
        return DelayedVestingAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDelayedVestingAccount();
        message.baseVestingAccount = (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null)
            ? BaseVestingAccount.fromPartial(object.baseVestingAccount)
            : undefined;
        return message;
    },
};
function createBasePeriod() {
    return { length: Long.ZERO, amount: [] };
}
export const Period = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.length.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.length.toString());
        }
        for (const v of message.amount) {
            Coin.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePeriod();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.length = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.amount.push(Coin.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            length: isSet(object.length) ? Long.fromValue(object.length) : Long.ZERO,
            amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e) => Coin.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.length.equals(Long.ZERO)) {
            obj.length = (message.length || Long.ZERO).toString();
        }
        if (message.amount?.length) {
            obj.amount = message.amount.map((e) => Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Period.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePeriod();
        message.length = (object.length !== undefined && object.length !== null)
            ? Long.fromValue(object.length)
            : Long.ZERO;
        message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
        return message;
    },
};
function createBasePeriodicVestingAccount() {
    return { baseVestingAccount: undefined, startTime: Long.ZERO, vestingPeriods: [] };
}
export const PeriodicVestingAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseVestingAccount !== undefined) {
            BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).join();
        }
        if (!message.startTime.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.startTime.toString());
        }
        for (const v of message.vestingPeriods) {
            Period.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePeriodicVestingAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseVestingAccount = BaseVestingAccount.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startTime = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.vestingPeriods.push(Period.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseVestingAccount: isSet(object.baseVestingAccount)
                ? BaseVestingAccount.fromJSON(object.baseVestingAccount)
                : undefined,
            startTime: isSet(object.startTime) ? Long.fromValue(object.startTime) : Long.ZERO,
            vestingPeriods: globalThis.Array.isArray(object?.vestingPeriods)
                ? object.vestingPeriods.map((e) => Period.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseVestingAccount !== undefined) {
            obj.baseVestingAccount = BaseVestingAccount.toJSON(message.baseVestingAccount);
        }
        if (!message.startTime.equals(Long.ZERO)) {
            obj.startTime = (message.startTime || Long.ZERO).toString();
        }
        if (message.vestingPeriods?.length) {
            obj.vestingPeriods = message.vestingPeriods.map((e) => Period.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return PeriodicVestingAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePeriodicVestingAccount();
        message.baseVestingAccount = (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null)
            ? BaseVestingAccount.fromPartial(object.baseVestingAccount)
            : undefined;
        message.startTime = (object.startTime !== undefined && object.startTime !== null)
            ? Long.fromValue(object.startTime)
            : Long.ZERO;
        message.vestingPeriods = object.vestingPeriods?.map((e) => Period.fromPartial(e)) || [];
        return message;
    },
};
function createBasePermanentLockedAccount() {
    return { baseVestingAccount: undefined };
}
export const PermanentLockedAccount = {
    encode(message, writer = new BinaryWriter()) {
        if (message.baseVestingAccount !== undefined) {
            BaseVestingAccount.encode(message.baseVestingAccount, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermanentLockedAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.baseVestingAccount = BaseVestingAccount.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseVestingAccount: isSet(object.baseVestingAccount)
                ? BaseVestingAccount.fromJSON(object.baseVestingAccount)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.baseVestingAccount !== undefined) {
            obj.baseVestingAccount = BaseVestingAccount.toJSON(message.baseVestingAccount);
        }
        return obj;
    },
    create(base) {
        return PermanentLockedAccount.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePermanentLockedAccount();
        message.baseVestingAccount = (object.baseVestingAccount !== undefined && object.baseVestingAccount !== null)
            ? BaseVestingAccount.fromPartial(object.baseVestingAccount)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
