// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/connection/v1/genesis.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ConnectionPaths, IdentifiedConnection, Params } from "./connection";
export const protobufPackage = "ibc.core.connection.v1";
function createBaseGenesisState() {
    return { connections: [], clientConnectionPaths: [], nextConnectionSequence: Long.UZERO, params: undefined };
}
export const GenesisState = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.connections) {
            IdentifiedConnection.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.clientConnectionPaths) {
            ConnectionPaths.encode(v, writer.uint32(18).fork()).join();
        }
        if (!message.nextConnectionSequence.equals(Long.UZERO)) {
            writer.uint32(24).uint64(message.nextConnectionSequence.toString());
        }
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.connections.push(IdentifiedConnection.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientConnectionPaths.push(ConnectionPaths.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.nextConnectionSequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            connections: globalThis.Array.isArray(object?.connections)
                ? object.connections.map((e) => IdentifiedConnection.fromJSON(e))
                : [],
            clientConnectionPaths: globalThis.Array.isArray(object?.clientConnectionPaths)
                ? object.clientConnectionPaths.map((e) => ConnectionPaths.fromJSON(e))
                : [],
            nextConnectionSequence: isSet(object.nextConnectionSequence)
                ? Long.fromValue(object.nextConnectionSequence)
                : Long.UZERO,
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.connections?.length) {
            obj.connections = message.connections.map((e) => IdentifiedConnection.toJSON(e));
        }
        if (message.clientConnectionPaths?.length) {
            obj.clientConnectionPaths = message.clientConnectionPaths.map((e) => ConnectionPaths.toJSON(e));
        }
        if (!message.nextConnectionSequence.equals(Long.UZERO)) {
            obj.nextConnectionSequence = (message.nextConnectionSequence || Long.UZERO).toString();
        }
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.connections = object.connections?.map((e) => IdentifiedConnection.fromPartial(e)) || [];
        message.clientConnectionPaths = object.clientConnectionPaths?.map((e) => ConnectionPaths.fromPartial(e)) || [];
        message.nextConnectionSequence =
            (object.nextConnectionSequence !== undefined && object.nextConnectionSequence !== null)
                ? Long.fromValue(object.nextConnectionSequence)
                : Long.UZERO;
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
