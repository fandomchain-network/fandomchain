// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/genesis.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Denom } from "./denom";
import { Params } from "./params";
export const protobufPackage = "fandomchain.tokenfactory.v1";
function createBaseGenesisState() {
    return { params: undefined, denomMap: [], portId: "" };
}
export const GenesisState = {
    encode(message, writer = new BinaryWriter()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        for (const v of message.denomMap) {
            Denom.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.portId !== "") {
            writer.uint32(26).string(message.portId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denomMap.push(Denom.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.portId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
            denomMap: globalThis.Array.isArray(object?.denomMap) ? object.denomMap.map((e) => Denom.fromJSON(e)) : [],
            portId: isSet(object.portId) ? globalThis.String(object.portId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        if (message.denomMap?.length) {
            obj.denomMap = message.denomMap.map((e) => Denom.toJSON(e));
        }
        if (message.portId !== "") {
            obj.portId = message.portId;
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        message.denomMap = object.denomMap?.map((e) => Denom.fromPartial(e)) || [];
        message.portId = object.portId ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
