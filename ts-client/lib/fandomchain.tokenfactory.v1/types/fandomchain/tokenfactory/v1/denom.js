// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/denom.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
export const protobufPackage = "fandomchain.tokenfactory.v1";
function createBaseDenom() {
    return {
        denom: "",
        description: "",
        ticker: "",
        precision: Long.ZERO,
        url: "",
        owner: "",
        virtualTokenReserves: Long.ZERO,
        virtualFandomReserves: Long.ZERO,
        realTokenReserves: Long.ZERO,
        realFandomReserves: Long.ZERO,
        initialVirtualTokenReserves: Long.ZERO,
        initialVirtualFandomReserves: Long.ZERO,
        initialRealTokenReserves: Long.ZERO,
        bondingCurveEnabled: false,
    };
}
export const Denom = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (!message.precision.equals(Long.ZERO)) {
            writer.uint32(32).int64(message.precision.toString());
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        if (message.owner !== "") {
            writer.uint32(50).string(message.owner);
        }
        if (!message.virtualTokenReserves.equals(Long.ZERO)) {
            writer.uint32(56).int64(message.virtualTokenReserves.toString());
        }
        if (!message.virtualFandomReserves.equals(Long.ZERO)) {
            writer.uint32(64).int64(message.virtualFandomReserves.toString());
        }
        if (!message.realTokenReserves.equals(Long.ZERO)) {
            writer.uint32(72).int64(message.realTokenReserves.toString());
        }
        if (!message.realFandomReserves.equals(Long.ZERO)) {
            writer.uint32(80).int64(message.realFandomReserves.toString());
        }
        if (!message.initialVirtualTokenReserves.equals(Long.ZERO)) {
            writer.uint32(88).int64(message.initialVirtualTokenReserves.toString());
        }
        if (!message.initialVirtualFandomReserves.equals(Long.ZERO)) {
            writer.uint32(96).int64(message.initialVirtualFandomReserves.toString());
        }
        if (!message.initialRealTokenReserves.equals(Long.ZERO)) {
            writer.uint32(104).int64(message.initialRealTokenReserves.toString());
        }
        if (message.bondingCurveEnabled !== false) {
            writer.uint32(112).bool(message.bondingCurveEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.precision = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.virtualTokenReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.virtualFandomReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.realTokenReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.realFandomReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.initialVirtualTokenReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.initialVirtualFandomReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.initialRealTokenReserves = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.bondingCurveEnabled = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            precision: isSet(object.precision) ? Long.fromValue(object.precision) : Long.ZERO,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            virtualTokenReserves: isSet(object.virtualTokenReserves)
                ? Long.fromValue(object.virtualTokenReserves)
                : Long.ZERO,
            virtualFandomReserves: isSet(object.virtualFandomReserves)
                ? Long.fromValue(object.virtualFandomReserves)
                : Long.ZERO,
            realTokenReserves: isSet(object.realTokenReserves) ? Long.fromValue(object.realTokenReserves) : Long.ZERO,
            realFandomReserves: isSet(object.realFandomReserves) ? Long.fromValue(object.realFandomReserves) : Long.ZERO,
            initialVirtualTokenReserves: isSet(object.initialVirtualTokenReserves)
                ? Long.fromValue(object.initialVirtualTokenReserves)
                : Long.ZERO,
            initialVirtualFandomReserves: isSet(object.initialVirtualFandomReserves)
                ? Long.fromValue(object.initialVirtualFandomReserves)
                : Long.ZERO,
            initialRealTokenReserves: isSet(object.initialRealTokenReserves)
                ? Long.fromValue(object.initialRealTokenReserves)
                : Long.ZERO,
            bondingCurveEnabled: isSet(object.bondingCurveEnabled) ? globalThis.Boolean(object.bondingCurveEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (!message.precision.equals(Long.ZERO)) {
            obj.precision = (message.precision || Long.ZERO).toString();
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (!message.virtualTokenReserves.equals(Long.ZERO)) {
            obj.virtualTokenReserves = (message.virtualTokenReserves || Long.ZERO).toString();
        }
        if (!message.virtualFandomReserves.equals(Long.ZERO)) {
            obj.virtualFandomReserves = (message.virtualFandomReserves || Long.ZERO).toString();
        }
        if (!message.realTokenReserves.equals(Long.ZERO)) {
            obj.realTokenReserves = (message.realTokenReserves || Long.ZERO).toString();
        }
        if (!message.realFandomReserves.equals(Long.ZERO)) {
            obj.realFandomReserves = (message.realFandomReserves || Long.ZERO).toString();
        }
        if (!message.initialVirtualTokenReserves.equals(Long.ZERO)) {
            obj.initialVirtualTokenReserves = (message.initialVirtualTokenReserves || Long.ZERO).toString();
        }
        if (!message.initialVirtualFandomReserves.equals(Long.ZERO)) {
            obj.initialVirtualFandomReserves = (message.initialVirtualFandomReserves || Long.ZERO).toString();
        }
        if (!message.initialRealTokenReserves.equals(Long.ZERO)) {
            obj.initialRealTokenReserves = (message.initialRealTokenReserves || Long.ZERO).toString();
        }
        if (message.bondingCurveEnabled !== false) {
            obj.bondingCurveEnabled = message.bondingCurveEnabled;
        }
        return obj;
    },
    create(base) {
        return Denom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDenom();
        message.denom = object.denom ?? "";
        message.description = object.description ?? "";
        message.ticker = object.ticker ?? "";
        message.precision = (object.precision !== undefined && object.precision !== null)
            ? Long.fromValue(object.precision)
            : Long.ZERO;
        message.url = object.url ?? "";
        message.owner = object.owner ?? "";
        message.virtualTokenReserves = (object.virtualTokenReserves !== undefined && object.virtualTokenReserves !== null)
            ? Long.fromValue(object.virtualTokenReserves)
            : Long.ZERO;
        message.virtualFandomReserves =
            (object.virtualFandomReserves !== undefined && object.virtualFandomReserves !== null)
                ? Long.fromValue(object.virtualFandomReserves)
                : Long.ZERO;
        message.realTokenReserves = (object.realTokenReserves !== undefined && object.realTokenReserves !== null)
            ? Long.fromValue(object.realTokenReserves)
            : Long.ZERO;
        message.realFandomReserves = (object.realFandomReserves !== undefined && object.realFandomReserves !== null)
            ? Long.fromValue(object.realFandomReserves)
            : Long.ZERO;
        message.initialVirtualTokenReserves =
            (object.initialVirtualTokenReserves !== undefined && object.initialVirtualTokenReserves !== null)
                ? Long.fromValue(object.initialVirtualTokenReserves)
                : Long.ZERO;
        message.initialVirtualFandomReserves =
            (object.initialVirtualFandomReserves !== undefined && object.initialVirtualFandomReserves !== null)
                ? Long.fromValue(object.initialVirtualFandomReserves)
                : Long.ZERO;
        message.initialRealTokenReserves =
            (object.initialRealTokenReserves !== undefined && object.initialRealTokenReserves !== null)
                ? Long.fromValue(object.initialRealTokenReserves)
                : Long.ZERO;
        message.bondingCurveEnabled = object.bondingCurveEnabled ?? false;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
