// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/tx.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Params } from "./params";
export const protobufPackage = "fandomchain.tokenfactory.v1";
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
export const MsgUpdateParams = {
    encode(message, writer = new BinaryWriter()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateParams();
        message.authority = object.authority ?? "";
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
export const MsgUpdateParamsResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
function createBaseMsgCreateDenom() {
    return { owner: "", denom: "", description: "", ticker: "", url: "" };
}
export const MsgCreateDenom = {
    encode(message, writer = new BinaryWriter()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(34).string(message.ticker);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return MsgCreateDenom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateDenom();
        message.owner = object.owner ?? "";
        message.denom = object.denom ?? "";
        message.description = object.description ?? "";
        message.ticker = object.ticker ?? "";
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseMsgCreateDenomResponse() {
    return {};
}
export const MsgCreateDenomResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgCreateDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgCreateDenomResponse();
        return message;
    },
};
function createBaseMsgBuyWithBondingCurve() {
    return { buyer: "", denom: "", fandomAmount: Long.ZERO, minTokensOut: Long.ZERO };
}
export const MsgBuyWithBondingCurve = {
    encode(message, writer = new BinaryWriter()) {
        if (message.buyer !== "") {
            writer.uint32(10).string(message.buyer);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (!message.fandomAmount.equals(Long.ZERO)) {
            writer.uint32(24).int64(message.fandomAmount.toString());
        }
        if (!message.minTokensOut.equals(Long.ZERO)) {
            writer.uint32(32).int64(message.minTokensOut.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBuyWithBondingCurve();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.buyer = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fandomAmount = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.minTokensOut = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            fandomAmount: isSet(object.fandomAmount) ? Long.fromValue(object.fandomAmount) : Long.ZERO,
            minTokensOut: isSet(object.minTokensOut) ? Long.fromValue(object.minTokensOut) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.buyer !== "") {
            obj.buyer = message.buyer;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (!message.fandomAmount.equals(Long.ZERO)) {
            obj.fandomAmount = (message.fandomAmount || Long.ZERO).toString();
        }
        if (!message.minTokensOut.equals(Long.ZERO)) {
            obj.minTokensOut = (message.minTokensOut || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return MsgBuyWithBondingCurve.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgBuyWithBondingCurve();
        message.buyer = object.buyer ?? "";
        message.denom = object.denom ?? "";
        message.fandomAmount = (object.fandomAmount !== undefined && object.fandomAmount !== null)
            ? Long.fromValue(object.fandomAmount)
            : Long.ZERO;
        message.minTokensOut = (object.minTokensOut !== undefined && object.minTokensOut !== null)
            ? Long.fromValue(object.minTokensOut)
            : Long.ZERO;
        return message;
    },
};
function createBaseMsgBuyWithBondingCurveResponse() {
    return { tokensReceived: Long.ZERO };
}
export const MsgBuyWithBondingCurveResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.tokensReceived.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.tokensReceived.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBuyWithBondingCurveResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tokensReceived = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tokensReceived: isSet(object.tokensReceived) ? Long.fromValue(object.tokensReceived) : Long.ZERO };
    },
    toJSON(message) {
        const obj = {};
        if (!message.tokensReceived.equals(Long.ZERO)) {
            obj.tokensReceived = (message.tokensReceived || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return MsgBuyWithBondingCurveResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgBuyWithBondingCurveResponse();
        message.tokensReceived = (object.tokensReceived !== undefined && object.tokensReceived !== null)
            ? Long.fromValue(object.tokensReceived)
            : Long.ZERO;
        return message;
    },
};
function createBaseMsgSellWithBondingCurve() {
    return { seller: "", denom: "", tokenAmount: Long.ZERO, minFandomOut: Long.ZERO };
}
export const MsgSellWithBondingCurve = {
    encode(message, writer = new BinaryWriter()) {
        if (message.seller !== "") {
            writer.uint32(10).string(message.seller);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (!message.tokenAmount.equals(Long.ZERO)) {
            writer.uint32(24).int64(message.tokenAmount.toString());
        }
        if (!message.minFandomOut.equals(Long.ZERO)) {
            writer.uint32(32).int64(message.minFandomOut.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSellWithBondingCurve();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.seller = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tokenAmount = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.minFandomOut = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            seller: isSet(object.seller) ? globalThis.String(object.seller) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            tokenAmount: isSet(object.tokenAmount) ? Long.fromValue(object.tokenAmount) : Long.ZERO,
            minFandomOut: isSet(object.minFandomOut) ? Long.fromValue(object.minFandomOut) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.seller !== "") {
            obj.seller = message.seller;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (!message.tokenAmount.equals(Long.ZERO)) {
            obj.tokenAmount = (message.tokenAmount || Long.ZERO).toString();
        }
        if (!message.minFandomOut.equals(Long.ZERO)) {
            obj.minFandomOut = (message.minFandomOut || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return MsgSellWithBondingCurve.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSellWithBondingCurve();
        message.seller = object.seller ?? "";
        message.denom = object.denom ?? "";
        message.tokenAmount = (object.tokenAmount !== undefined && object.tokenAmount !== null)
            ? Long.fromValue(object.tokenAmount)
            : Long.ZERO;
        message.minFandomOut = (object.minFandomOut !== undefined && object.minFandomOut !== null)
            ? Long.fromValue(object.minFandomOut)
            : Long.ZERO;
        return message;
    },
};
function createBaseMsgSellWithBondingCurveResponse() {
    return { fandomReceived: Long.ZERO };
}
export const MsgSellWithBondingCurveResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.fandomReceived.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.fandomReceived.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSellWithBondingCurveResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fandomReceived = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { fandomReceived: isSet(object.fandomReceived) ? Long.fromValue(object.fandomReceived) : Long.ZERO };
    },
    toJSON(message) {
        const obj = {};
        if (!message.fandomReceived.equals(Long.ZERO)) {
            obj.fandomReceived = (message.fandomReceived || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return MsgSellWithBondingCurveResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSellWithBondingCurveResponse();
        message.fandomReceived = (object.fandomReceived !== undefined && object.fandomReceived !== null)
            ? Long.fromValue(object.fandomReceived)
            : Long.ZERO;
        return message;
    },
};
export const MsgServiceName = "fandomchain.tokenfactory.v1.Msg";
export class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || MsgServiceName;
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.CreateDenom = this.CreateDenom.bind(this);
        this.BuyWithBondingCurve = this.BuyWithBondingCurve.bind(this);
        this.SellWithBondingCurve = this.SellWithBondingCurve.bind(this);
    }
    UpdateParams(request) {
        const data = MsgUpdateParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateParams", data);
        return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
    }
    CreateDenom(request) {
        const data = MsgCreateDenom.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateDenom", data);
        return promise.then((data) => MsgCreateDenomResponse.decode(new BinaryReader(data)));
    }
    BuyWithBondingCurve(request) {
        const data = MsgBuyWithBondingCurve.encode(request).finish();
        const promise = this.rpc.request(this.service, "BuyWithBondingCurve", data);
        return promise.then((data) => MsgBuyWithBondingCurveResponse.decode(new BinaryReader(data)));
    }
    SellWithBondingCurve(request) {
        const data = MsgSellWithBondingCurve.encode(request).finish();
        const promise = this.rpc.request(this.service, "SellWithBondingCurve", data);
        return promise.then((data) => MsgSellWithBondingCurveResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
