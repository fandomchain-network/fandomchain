// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Denom } from "./denom";
import { Params } from "./params";
export const protobufPackage = "fandomchain.tokenfactory.v1";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return QueryParamsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
export const QueryParamsResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return QueryParamsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryGetDenomRequest() {
    return { denom: "" };
}
export const QueryGetDenomRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return QueryGetDenomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetDenomRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryGetDenomResponse() {
    return { denom: undefined };
}
export const QueryGetDenomResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== undefined) {
            Denom.encode(message.denom, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = Denom.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? Denom.fromJSON(object.denom) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== undefined) {
            obj.denom = Denom.toJSON(message.denom);
        }
        return obj;
    },
    create(base) {
        return QueryGetDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetDenomResponse();
        message.denom = (object.denom !== undefined && object.denom !== null) ? Denom.fromPartial(object.denom) : undefined;
        return message;
    },
};
function createBaseQueryAllDenomRequest() {
    return { pagination: undefined };
}
export const QueryAllDenomRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return QueryAllDenomRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryAllDenomRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryAllDenomResponse() {
    return { denom: [], pagination: undefined };
}
export const QueryAllDenomResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.denom) {
            Denom.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom.push(Denom.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: globalThis.Array.isArray(object?.denom) ? object.denom.map((e) => Denom.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom?.length) {
            obj.denom = message.denom.map((e) => Denom.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return QueryAllDenomResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryAllDenomResponse();
        message.denom = object.denom?.map((e) => Denom.fromPartial(e)) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryGetBondingCurvePriceRequest() {
    return { denom: "" };
}
export const QueryGetBondingCurvePriceRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetBondingCurvePriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return QueryGetBondingCurvePriceRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetBondingCurvePriceRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryGetBondingCurvePriceResponse() {
    return { price: "" };
}
export const QueryGetBondingCurvePriceResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.price !== "") {
            writer.uint32(10).string(message.price);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetBondingCurvePriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.price = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { price: isSet(object.price) ? globalThis.String(object.price) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.price !== "") {
            obj.price = message.price;
        }
        return obj;
    },
    create(base) {
        return QueryGetBondingCurvePriceResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetBondingCurvePriceResponse();
        message.price = object.price ?? "";
        return message;
    },
};
function createBaseQueryGetBondingCurveProgressRequest() {
    return { denom: "" };
}
export const QueryGetBondingCurveProgressRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetBondingCurveProgressRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return QueryGetBondingCurveProgressRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetBondingCurveProgressRequest();
        message.denom = object.denom ?? "";
        return message;
    },
};
function createBaseQueryGetBondingCurveProgressResponse() {
    return { progress: "", tokensSold: Long.ZERO, tokensRemaining: Long.ZERO };
}
export const QueryGetBondingCurveProgressResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.progress !== "") {
            writer.uint32(10).string(message.progress);
        }
        if (!message.tokensSold.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.tokensSold.toString());
        }
        if (!message.tokensRemaining.equals(Long.ZERO)) {
            writer.uint32(24).int64(message.tokensRemaining.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetBondingCurveProgressResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.progress = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.tokensSold = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.tokensRemaining = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            progress: isSet(object.progress) ? globalThis.String(object.progress) : "",
            tokensSold: isSet(object.tokensSold) ? Long.fromValue(object.tokensSold) : Long.ZERO,
            tokensRemaining: isSet(object.tokensRemaining) ? Long.fromValue(object.tokensRemaining) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.progress !== "") {
            obj.progress = message.progress;
        }
        if (!message.tokensSold.equals(Long.ZERO)) {
            obj.tokensSold = (message.tokensSold || Long.ZERO).toString();
        }
        if (!message.tokensRemaining.equals(Long.ZERO)) {
            obj.tokensRemaining = (message.tokensRemaining || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return QueryGetBondingCurveProgressResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryGetBondingCurveProgressResponse();
        message.progress = object.progress ?? "";
        message.tokensSold = (object.tokensSold !== undefined && object.tokensSold !== null)
            ? Long.fromValue(object.tokensSold)
            : Long.ZERO;
        message.tokensRemaining = (object.tokensRemaining !== undefined && object.tokensRemaining !== null)
            ? Long.fromValue(object.tokensRemaining)
            : Long.ZERO;
        return message;
    },
};
function createBaseQueryEstimateBuyRequest() {
    return { denom: "", fandomAmount: Long.ZERO };
}
export const QueryEstimateBuyRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (!message.fandomAmount.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.fandomAmount.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateBuyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fandomAmount = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            fandomAmount: isSet(object.fandomAmount) ? Long.fromValue(object.fandomAmount) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (!message.fandomAmount.equals(Long.ZERO)) {
            obj.fandomAmount = (message.fandomAmount || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return QueryEstimateBuyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryEstimateBuyRequest();
        message.denom = object.denom ?? "";
        message.fandomAmount = (object.fandomAmount !== undefined && object.fandomAmount !== null)
            ? Long.fromValue(object.fandomAmount)
            : Long.ZERO;
        return message;
    },
};
function createBaseQueryEstimateBuyResponse() {
    return { tokensOut: Long.ZERO, priceImpact: "" };
}
export const QueryEstimateBuyResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.tokensOut.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.tokensOut.toString());
        }
        if (message.priceImpact !== "") {
            writer.uint32(18).string(message.priceImpact);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateBuyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tokensOut = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.priceImpact = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokensOut: isSet(object.tokensOut) ? Long.fromValue(object.tokensOut) : Long.ZERO,
            priceImpact: isSet(object.priceImpact) ? globalThis.String(object.priceImpact) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.tokensOut.equals(Long.ZERO)) {
            obj.tokensOut = (message.tokensOut || Long.ZERO).toString();
        }
        if (message.priceImpact !== "") {
            obj.priceImpact = message.priceImpact;
        }
        return obj;
    },
    create(base) {
        return QueryEstimateBuyResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryEstimateBuyResponse();
        message.tokensOut = (object.tokensOut !== undefined && object.tokensOut !== null)
            ? Long.fromValue(object.tokensOut)
            : Long.ZERO;
        message.priceImpact = object.priceImpact ?? "";
        return message;
    },
};
function createBaseQueryEstimateSellRequest() {
    return { denom: "", tokenAmount: Long.ZERO };
}
export const QueryEstimateSellRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (!message.tokenAmount.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.tokenAmount.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateSellRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.tokenAmount = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            tokenAmount: isSet(object.tokenAmount) ? Long.fromValue(object.tokenAmount) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (!message.tokenAmount.equals(Long.ZERO)) {
            obj.tokenAmount = (message.tokenAmount || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return QueryEstimateSellRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryEstimateSellRequest();
        message.denom = object.denom ?? "";
        message.tokenAmount = (object.tokenAmount !== undefined && object.tokenAmount !== null)
            ? Long.fromValue(object.tokenAmount)
            : Long.ZERO;
        return message;
    },
};
function createBaseQueryEstimateSellResponse() {
    return { fandomOut: Long.ZERO, priceImpact: "" };
}
export const QueryEstimateSellResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.fandomOut.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.fandomOut.toString());
        }
        if (message.priceImpact !== "") {
            writer.uint32(18).string(message.priceImpact);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEstimateSellResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fandomOut = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.priceImpact = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fandomOut: isSet(object.fandomOut) ? Long.fromValue(object.fandomOut) : Long.ZERO,
            priceImpact: isSet(object.priceImpact) ? globalThis.String(object.priceImpact) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.fandomOut.equals(Long.ZERO)) {
            obj.fandomOut = (message.fandomOut || Long.ZERO).toString();
        }
        if (message.priceImpact !== "") {
            obj.priceImpact = message.priceImpact;
        }
        return obj;
    },
    create(base) {
        return QueryEstimateSellResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryEstimateSellResponse();
        message.fandomOut = (object.fandomOut !== undefined && object.fandomOut !== null)
            ? Long.fromValue(object.fandomOut)
            : Long.ZERO;
        message.priceImpact = object.priceImpact ?? "";
        return message;
    },
};
export const QueryServiceName = "fandomchain.tokenfactory.v1.Query";
export class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || QueryServiceName;
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.GetDenom = this.GetDenom.bind(this);
        this.ListDenom = this.ListDenom.bind(this);
        this.GetBondingCurvePrice = this.GetBondingCurvePrice.bind(this);
        this.GetBondingCurveProgress = this.GetBondingCurveProgress.bind(this);
        this.EstimateBuy = this.EstimateBuy.bind(this);
        this.EstimateSell = this.EstimateSell.bind(this);
    }
    Params(request) {
        const data = QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
    }
    GetDenom(request) {
        const data = QueryGetDenomRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDenom", data);
        return promise.then((data) => QueryGetDenomResponse.decode(new BinaryReader(data)));
    }
    ListDenom(request) {
        const data = QueryAllDenomRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ListDenom", data);
        return promise.then((data) => QueryAllDenomResponse.decode(new BinaryReader(data)));
    }
    GetBondingCurvePrice(request) {
        const data = QueryGetBondingCurvePriceRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetBondingCurvePrice", data);
        return promise.then((data) => QueryGetBondingCurvePriceResponse.decode(new BinaryReader(data)));
    }
    GetBondingCurveProgress(request) {
        const data = QueryGetBondingCurveProgressRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetBondingCurveProgress", data);
        return promise.then((data) => QueryGetBondingCurveProgressResponse.decode(new BinaryReader(data)));
    }
    EstimateBuy(request) {
        const data = QueryEstimateBuyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EstimateBuy", data);
        return promise.then((data) => QueryEstimateBuyResponse.decode(new BinaryReader(data)));
    }
    EstimateSell(request) {
        const data = QueryEstimateSellRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EstimateSell", data);
        return promise.then((data) => QueryEstimateSellResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
