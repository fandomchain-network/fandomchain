// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/packet.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "fandomchain.tokenfactory.v1";
function createBaseTokenfactoryPacketData() {
    return { noData: undefined };
}
export const TokenfactoryPacketData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.noData !== undefined) {
            NoData.encode(message.noData, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenfactoryPacketData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.noData = NoData.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { noData: isSet(object.noData) ? NoData.fromJSON(object.noData) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.noData !== undefined) {
            obj.noData = NoData.toJSON(message.noData);
        }
        return obj;
    },
    create(base) {
        return TokenfactoryPacketData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTokenfactoryPacketData();
        message.noData = (object.noData !== undefined && object.noData !== null)
            ? NoData.fromPartial(object.noData)
            : undefined;
        return message;
    },
};
function createBaseNoData() {
    return {};
}
export const NoData = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNoData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return NoData.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseNoData();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
