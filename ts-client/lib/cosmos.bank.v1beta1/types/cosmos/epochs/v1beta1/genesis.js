// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/epochs/v1beta1/genesis.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
export const protobufPackage = "cosmos.epochs.v1beta1";
function createBaseEpochInfo() {
    return {
        identifier: "",
        startTime: undefined,
        duration: undefined,
        currentEpoch: 0,
        currentEpochStartTime: undefined,
        epochCountingStarted: false,
        currentEpochStartHeight: 0,
    };
}
export const EpochInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        if (message.startTime !== undefined) {
            Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).join();
        }
        if (message.duration !== undefined) {
            Duration.encode(message.duration, writer.uint32(26).fork()).join();
        }
        if (message.currentEpoch !== 0) {
            writer.uint32(32).int64(message.currentEpoch);
        }
        if (message.currentEpochStartTime !== undefined) {
            Timestamp.encode(toTimestamp(message.currentEpochStartTime), writer.uint32(42).fork()).join();
        }
        if (message.epochCountingStarted !== false) {
            writer.uint32(48).bool(message.epochCountingStarted);
        }
        if (message.currentEpochStartHeight !== 0) {
            writer.uint32(64).int64(message.currentEpochStartHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEpochInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.identifier = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.duration = Duration.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.currentEpoch = longToNumber(reader.int64());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.currentEpochStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.epochCountingStarted = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.currentEpochStartHeight = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
            startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
            duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
            currentEpoch: isSet(object.currentEpoch) ? globalThis.Number(object.currentEpoch) : 0,
            currentEpochStartTime: isSet(object.currentEpochStartTime)
                ? fromJsonTimestamp(object.currentEpochStartTime)
                : undefined,
            epochCountingStarted: isSet(object.epochCountingStarted)
                ? globalThis.Boolean(object.epochCountingStarted)
                : false,
            currentEpochStartHeight: isSet(object.currentEpochStartHeight)
                ? globalThis.Number(object.currentEpochStartHeight)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.identifier !== "") {
            obj.identifier = message.identifier;
        }
        if (message.startTime !== undefined) {
            obj.startTime = message.startTime.toISOString();
        }
        if (message.duration !== undefined) {
            obj.duration = Duration.toJSON(message.duration);
        }
        if (message.currentEpoch !== 0) {
            obj.currentEpoch = Math.round(message.currentEpoch);
        }
        if (message.currentEpochStartTime !== undefined) {
            obj.currentEpochStartTime = message.currentEpochStartTime.toISOString();
        }
        if (message.epochCountingStarted !== false) {
            obj.epochCountingStarted = message.epochCountingStarted;
        }
        if (message.currentEpochStartHeight !== 0) {
            obj.currentEpochStartHeight = Math.round(message.currentEpochStartHeight);
        }
        return obj;
    },
    create(base) {
        return EpochInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEpochInfo();
        message.identifier = object.identifier ?? "";
        message.startTime = object.startTime ?? undefined;
        message.duration = (object.duration !== undefined && object.duration !== null)
            ? Duration.fromPartial(object.duration)
            : undefined;
        message.currentEpoch = object.currentEpoch ?? 0;
        message.currentEpochStartTime = object.currentEpochStartTime ?? undefined;
        message.epochCountingStarted = object.epochCountingStarted ?? false;
        message.currentEpochStartHeight = object.currentEpochStartHeight ?? 0;
        return message;
    },
};
function createBaseGenesisState() {
    return { epochs: [] };
}
export const GenesisState = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.epochs) {
            EpochInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.epochs.push(EpochInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochs: globalThis.Array.isArray(object?.epochs) ? object.epochs.map((e) => EpochInfo.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.epochs?.length) {
            obj.epochs = message.epochs.map((e) => EpochInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.epochs = object.epochs?.map((e) => EpochInfo.fromPartial(e)) || [];
        return message;
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
