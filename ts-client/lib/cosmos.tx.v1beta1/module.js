// Generated by Ignite ignite.com/cli
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { Tx as typeTx } from "./types";
import { TxRaw as typeTxRaw } from "./types";
import { SignDoc as typeSignDoc } from "./types";
import { SignDocDirectAux as typeSignDocDirectAux } from "./types";
import { TxBody as typeTxBody } from "./types";
import { AuthInfo as typeAuthInfo } from "./types";
import { SignerInfo as typeSignerInfo } from "./types";
import { ModeInfo as typeModeInfo } from "./types";
import { ModeInfo_Single as typeModeInfo_Single } from "./types";
import { ModeInfo_Multi as typeModeInfo_Multi } from "./types";
import { Fee as typeFee } from "./types";
import { Tip as typeTip } from "./types";
import { AuxSignerData as typeAuxSignerData } from "./types";
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {};
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            Tx: getStructure(typeTx.fromPartial({})),
            TxRaw: getStructure(typeTxRaw.fromPartial({})),
            SignDoc: getStructure(typeSignDoc.fromPartial({})),
            SignDocDirectAux: getStructure(typeSignDocDirectAux.fromPartial({})),
            TxBody: getStructure(typeTxBody.fromPartial({})),
            AuthInfo: getStructure(typeAuthInfo.fromPartial({})),
            SignerInfo: getStructure(typeSignerInfo.fromPartial({})),
            ModeInfo: getStructure(typeModeInfo.fromPartial({})),
            ModeInfo_Single: getStructure(typeModeInfo_Single.fromPartial({})),
            ModeInfo_Multi: getStructure(typeModeInfo_Multi.fromPartial({})),
            Fee: getStructure(typeFee.fromPartial({})),
            Tip: getStructure(typeTip.fromPartial({})),
            AuxSignerData: getStructure(typeAuxSignerData.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosTxV_1Beta_1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
