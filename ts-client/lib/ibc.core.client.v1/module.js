// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgCreateClient } from "./types/ibc/core/client/v1/tx";
import { MsgUpdateClient } from "./types/ibc/core/client/v1/tx";
import { MsgUpgradeClient } from "./types/ibc/core/client/v1/tx";
import { MsgSubmitMisbehaviour } from "./types/ibc/core/client/v1/tx";
import { MsgRecoverClient } from "./types/ibc/core/client/v1/tx";
import { MsgIBCSoftwareUpgrade } from "./types/ibc/core/client/v1/tx";
import { MsgUpdateParams } from "./types/ibc/core/client/v1/tx";
import { MsgDeleteClientCreator } from "./types/ibc/core/client/v1/tx";
import { IdentifiedClientState as typeIdentifiedClientState } from "./types";
import { ConsensusStateWithHeight as typeConsensusStateWithHeight } from "./types";
import { ClientConsensusStates as typeClientConsensusStates } from "./types";
import { Height as typeHeight } from "./types";
import { Params as typeParams } from "./types";
import { GenesisMetadata as typeGenesisMetadata } from "./types";
import { IdentifiedGenesisMetadata as typeIdentifiedGenesisMetadata } from "./types";
export { MsgCreateClient, MsgUpdateClient, MsgUpgradeClient, MsgSubmitMisbehaviour, MsgRecoverClient, MsgIBCSoftwareUpgrade, MsgUpdateParams, MsgDeleteClientCreator };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgCreateClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgCreateClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgCreateClient({ value: MsgCreateClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgCreateClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateClient({ value: MsgUpdateClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpgradeClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpgradeClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpgradeClient({ value: MsgUpgradeClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpgradeClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgSubmitMisbehaviour({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviour: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgSubmitMisbehaviour({ value: MsgSubmitMisbehaviour.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSubmitMisbehaviour: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRecoverClient({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRecoverClient: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRecoverClient({ value: MsgRecoverClient.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRecoverClient: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgIBCSoftwareUpgrade({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgIbcsoftwareUpgrade({ value: MsgIBCSoftwareUpgrade.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgIBCSoftwareUpgrade: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgUpdateParams({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgDeleteClientCreator({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgDeleteClientCreator: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgDeleteClientCreator({ value: MsgDeleteClientCreator.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgDeleteClientCreator: Could not broadcast Tx: ' + e.message);
            }
        },
        msgCreateClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgCreateClient", value: MsgCreateClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgCreateClient: Could not create message: ' + e.message);
            }
        },
        msgUpdateClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateClient", value: MsgUpdateClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateClient: Could not create message: ' + e.message);
            }
        },
        msgUpgradeClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpgradeClient", value: MsgUpgradeClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpgradeClient: Could not create message: ' + e.message);
            }
        },
        msgSubmitMisbehaviour({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgSubmitMisbehaviour", value: MsgSubmitMisbehaviour.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSubmitMisbehaviour: Could not create message: ' + e.message);
            }
        },
        msgRecoverClient({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgRecoverClient", value: MsgRecoverClient.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRecoverClient: Could not create message: ' + e.message);
            }
        },
        msgIbcsoftwareUpgrade({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgIBCSoftwareUpgrade", value: MsgIBCSoftwareUpgrade.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgIBCSoftwareUpgrade: Could not create message: ' + e.message);
            }
        },
        msgUpdateParams({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgUpdateParams", value: MsgUpdateParams.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message);
            }
        },
        msgDeleteClientCreator({ value }) {
            try {
                return { typeUrl: "/ibc.core.client.v1.MsgDeleteClientCreator", value: MsgDeleteClientCreator.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgDeleteClientCreator: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            IdentifiedClientState: getStructure(typeIdentifiedClientState.fromPartial({})),
            ConsensusStateWithHeight: getStructure(typeConsensusStateWithHeight.fromPartial({})),
            ClientConsensusStates: getStructure(typeClientConsensusStates.fromPartial({})),
            Height: getStructure(typeHeight.fromPartial({})),
            Params: getStructure(typeParams.fromPartial({})),
            GenesisMetadata: getStructure(typeGenesisMetadata.fromPartial({})),
            IdentifiedGenesisMetadata: getStructure(typeIdentifiedGenesisMetadata.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcCoreClientV_1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
