// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/evidence/v1beta1/evidence.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../../../google/protobuf/timestamp";
export const protobufPackage = "cosmos.evidence.v1beta1";
function createBaseEquivocation() {
    return { height: Long.ZERO, time: undefined, power: Long.ZERO, consensusAddress: "" };
}
export const Equivocation = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.height.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.height.toString());
        }
        if (message.time !== undefined) {
            Timestamp.encode(toTimestamp(message.time), writer.uint32(18).fork()).join();
        }
        if (!message.power.equals(Long.ZERO)) {
            writer.uint32(24).int64(message.power.toString());
        }
        if (message.consensusAddress !== "") {
            writer.uint32(34).string(message.consensusAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEquivocation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.height = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.power = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.consensusAddress = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,
            time: isSet(object.time) ? fromJsonTimestamp(object.time) : undefined,
            power: isSet(object.power) ? Long.fromValue(object.power) : Long.ZERO,
            consensusAddress: isSet(object.consensusAddress) ? globalThis.String(object.consensusAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.height.equals(Long.ZERO)) {
            obj.height = (message.height || Long.ZERO).toString();
        }
        if (message.time !== undefined) {
            obj.time = message.time.toISOString();
        }
        if (!message.power.equals(Long.ZERO)) {
            obj.power = (message.power || Long.ZERO).toString();
        }
        if (message.consensusAddress !== "") {
            obj.consensusAddress = message.consensusAddress;
        }
        return obj;
    },
    create(base) {
        return Equivocation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEquivocation();
        message.height = (object.height !== undefined && object.height !== null)
            ? Long.fromValue(object.height)
            : Long.ZERO;
        message.time = object.time ?? undefined;
        message.power = (object.power !== undefined && object.power !== null) ? Long.fromValue(object.power) : Long.ZERO;
        message.consensusAddress = object.consensusAddress ?? "";
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
function isSet(value) {
    return value !== null && value !== undefined;
}
