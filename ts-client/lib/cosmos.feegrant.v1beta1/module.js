// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgGrantAllowance } from "./types/cosmos/feegrant/v1beta1/tx";
import { MsgRevokeAllowance } from "./types/cosmos/feegrant/v1beta1/tx";
import { MsgPruneAllowances } from "./types/cosmos/feegrant/v1beta1/tx";
import { BasicAllowance as typeBasicAllowance } from "./types";
import { PeriodicAllowance as typePeriodicAllowance } from "./types";
import { AllowedMsgAllowance as typeAllowedMsgAllowance } from "./types";
import { Grant as typeGrant } from "./types";
export { MsgGrantAllowance, MsgRevokeAllowance, MsgPruneAllowances };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgGrantAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgGrantAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgGrantAllowance({ value: MsgGrantAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgGrantAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRevokeAllowance({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRevokeAllowance: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRevokeAllowance({ value: MsgRevokeAllowance.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRevokeAllowance: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgPruneAllowances({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgPruneAllowances: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgPruneAllowances({ value: MsgPruneAllowances.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgPruneAllowances: Could not broadcast Tx: ' + e.message);
            }
        },
        msgGrantAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgGrantAllowance", value: MsgGrantAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgGrantAllowance: Could not create message: ' + e.message);
            }
        },
        msgRevokeAllowance({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgRevokeAllowance", value: MsgRevokeAllowance.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRevokeAllowance: Could not create message: ' + e.message);
            }
        },
        msgPruneAllowances({ value }) {
            try {
                return { typeUrl: "/cosmos.feegrant.v1beta1.MsgPruneAllowances", value: MsgPruneAllowances.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgPruneAllowances: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            BasicAllowance: getStructure(typeBasicAllowance.fromPartial({})),
            PeriodicAllowance: getStructure(typePeriodicAllowance.fromPartial({})),
            AllowedMsgAllowance: getStructure(typeAllowedMsgAllowance.fromPartial({})),
            Grant: getStructure(typeGrant.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            CosmosFeegrantV_1Beta_1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
