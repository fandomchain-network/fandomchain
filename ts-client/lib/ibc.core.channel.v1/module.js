// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgChannelOpenInit } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenTry } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenAck } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelOpenConfirm } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelCloseInit } from "./types/ibc/core/channel/v1/tx";
import { MsgChannelCloseConfirm } from "./types/ibc/core/channel/v1/tx";
import { MsgRecvPacket } from "./types/ibc/core/channel/v1/tx";
import { MsgTimeout } from "./types/ibc/core/channel/v1/tx";
import { MsgTimeoutOnClose } from "./types/ibc/core/channel/v1/tx";
import { MsgAcknowledgement } from "./types/ibc/core/channel/v1/tx";
import { Channel as typeChannel } from "./types";
import { IdentifiedChannel as typeIdentifiedChannel } from "./types";
import { Counterparty as typeCounterparty } from "./types";
import { Packet as typePacket } from "./types";
import { PacketState as typePacketState } from "./types";
import { PacketId as typePacketId } from "./types";
import { Acknowledgement as typeAcknowledgement } from "./types";
import { Timeout as typeTimeout } from "./types";
import { PacketSequence as typePacketSequence } from "./types";
export { MsgChannelOpenInit, MsgChannelOpenTry, MsgChannelOpenAck, MsgChannelOpenConfirm, MsgChannelCloseInit, MsgChannelCloseConfirm, MsgRecvPacket, MsgTimeout, MsgTimeoutOnClose, MsgAcknowledgement };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgChannelOpenInit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelOpenInit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelOpenInit({ value: MsgChannelOpenInit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelOpenInit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChannelOpenTry({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelOpenTry: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelOpenTry({ value: MsgChannelOpenTry.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelOpenTry: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChannelOpenAck({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelOpenAck: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelOpenAck({ value: MsgChannelOpenAck.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelOpenAck: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChannelOpenConfirm({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelOpenConfirm: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelOpenConfirm({ value: MsgChannelOpenConfirm.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelOpenConfirm: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChannelCloseInit({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelCloseInit: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelCloseInit({ value: MsgChannelCloseInit.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelCloseInit: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgChannelCloseConfirm({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgChannelCloseConfirm: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgChannelCloseConfirm({ value: MsgChannelCloseConfirm.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgChannelCloseConfirm: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRecvPacket({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRecvPacket: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRecvPacket({ value: MsgRecvPacket.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRecvPacket: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTimeout({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTimeout: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgTimeout({ value: MsgTimeout.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTimeout: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTimeoutOnClose({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTimeoutOnClose: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgTimeoutOnClose({ value: MsgTimeoutOnClose.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTimeoutOnClose: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAcknowledgement({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAcknowledgement: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgAcknowledgement({ value: MsgAcknowledgement.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAcknowledgement: Could not broadcast Tx: ' + e.message);
            }
        },
        msgChannelOpenInit({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenInit", value: MsgChannelOpenInit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelOpenInit: Could not create message: ' + e.message);
            }
        },
        msgChannelOpenTry({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenTry", value: MsgChannelOpenTry.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelOpenTry: Could not create message: ' + e.message);
            }
        },
        msgChannelOpenAck({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenAck", value: MsgChannelOpenAck.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelOpenAck: Could not create message: ' + e.message);
            }
        },
        msgChannelOpenConfirm({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelOpenConfirm", value: MsgChannelOpenConfirm.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelOpenConfirm: Could not create message: ' + e.message);
            }
        },
        msgChannelCloseInit({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelCloseInit", value: MsgChannelCloseInit.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelCloseInit: Could not create message: ' + e.message);
            }
        },
        msgChannelCloseConfirm({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgChannelCloseConfirm", value: MsgChannelCloseConfirm.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgChannelCloseConfirm: Could not create message: ' + e.message);
            }
        },
        msgRecvPacket({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgRecvPacket", value: MsgRecvPacket.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRecvPacket: Could not create message: ' + e.message);
            }
        },
        msgTimeout({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgTimeout", value: MsgTimeout.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTimeout: Could not create message: ' + e.message);
            }
        },
        msgTimeoutOnClose({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgTimeoutOnClose", value: MsgTimeoutOnClose.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTimeoutOnClose: Could not create message: ' + e.message);
            }
        },
        msgAcknowledgement({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v1.MsgAcknowledgement", value: MsgAcknowledgement.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAcknowledgement: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            Channel: getStructure(typeChannel.fromPartial({})),
            IdentifiedChannel: getStructure(typeIdentifiedChannel.fromPartial({})),
            Counterparty: getStructure(typeCounterparty.fromPartial({})),
            Packet: getStructure(typePacket.fromPartial({})),
            PacketState: getStructure(typePacketState.fromPartial({})),
            PacketId: getStructure(typePacketId.fromPartial({})),
            Acknowledgement: getStructure(typeAcknowledgement.fromPartial({})),
            Timeout: getStructure(typeTimeout.fromPartial({})),
            PacketSequence: getStructure(typePacketSequence.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcCoreChannelV_1: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
