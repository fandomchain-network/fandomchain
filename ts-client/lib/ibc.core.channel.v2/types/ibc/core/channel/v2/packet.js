// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/channel/v2/packet.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
export const protobufPackage = "ibc.core.channel.v2";
/** PacketStatus specifies the status of a RecvPacketResult. */
export var PacketStatus;
(function (PacketStatus) {
    /** PACKET_STATUS_UNSPECIFIED - PACKET_STATUS_UNSPECIFIED indicates an unknown packet status. */
    PacketStatus[PacketStatus["PACKET_STATUS_UNSPECIFIED"] = 0] = "PACKET_STATUS_UNSPECIFIED";
    /** PACKET_STATUS_SUCCESS - PACKET_STATUS_SUCCESS indicates a successful packet receipt. */
    PacketStatus[PacketStatus["PACKET_STATUS_SUCCESS"] = 1] = "PACKET_STATUS_SUCCESS";
    /** PACKET_STATUS_FAILURE - PACKET_STATUS_FAILURE indicates a failed packet receipt. */
    PacketStatus[PacketStatus["PACKET_STATUS_FAILURE"] = 2] = "PACKET_STATUS_FAILURE";
    /** PACKET_STATUS_ASYNC - PACKET_STATUS_ASYNC indicates an async packet receipt. */
    PacketStatus[PacketStatus["PACKET_STATUS_ASYNC"] = 3] = "PACKET_STATUS_ASYNC";
    PacketStatus[PacketStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PacketStatus || (PacketStatus = {}));
export function packetStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "PACKET_STATUS_UNSPECIFIED":
            return PacketStatus.PACKET_STATUS_UNSPECIFIED;
        case 1:
        case "PACKET_STATUS_SUCCESS":
            return PacketStatus.PACKET_STATUS_SUCCESS;
        case 2:
        case "PACKET_STATUS_FAILURE":
            return PacketStatus.PACKET_STATUS_FAILURE;
        case 3:
        case "PACKET_STATUS_ASYNC":
            return PacketStatus.PACKET_STATUS_ASYNC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PacketStatus.UNRECOGNIZED;
    }
}
export function packetStatusToJSON(object) {
    switch (object) {
        case PacketStatus.PACKET_STATUS_UNSPECIFIED:
            return "PACKET_STATUS_UNSPECIFIED";
        case PacketStatus.PACKET_STATUS_SUCCESS:
            return "PACKET_STATUS_SUCCESS";
        case PacketStatus.PACKET_STATUS_FAILURE:
            return "PACKET_STATUS_FAILURE";
        case PacketStatus.PACKET_STATUS_ASYNC:
            return "PACKET_STATUS_ASYNC";
        case PacketStatus.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBasePacket() {
    return { sequence: Long.UZERO, sourceClient: "", destinationClient: "", timeoutTimestamp: Long.UZERO, payloads: [] };
}
export const Packet = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.sequence.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.sourceClient !== "") {
            writer.uint32(18).string(message.sourceClient);
        }
        if (message.destinationClient !== "") {
            writer.uint32(26).string(message.destinationClient);
        }
        if (!message.timeoutTimestamp.equals(Long.UZERO)) {
            writer.uint32(32).uint64(message.timeoutTimestamp.toString());
        }
        for (const v of message.payloads) {
            Payload.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePacket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.sourceClient = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.destinationClient = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.timeoutTimestamp = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.payloads.push(Payload.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
            sourceClient: isSet(object.sourceClient) ? globalThis.String(object.sourceClient) : "",
            destinationClient: isSet(object.destinationClient) ? globalThis.String(object.destinationClient) : "",
            timeoutTimestamp: isSet(object.timeoutTimestamp) ? Long.fromValue(object.timeoutTimestamp) : Long.UZERO,
            payloads: globalThis.Array.isArray(object?.payloads) ? object.payloads.map((e) => Payload.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.sequence.equals(Long.UZERO)) {
            obj.sequence = (message.sequence || Long.UZERO).toString();
        }
        if (message.sourceClient !== "") {
            obj.sourceClient = message.sourceClient;
        }
        if (message.destinationClient !== "") {
            obj.destinationClient = message.destinationClient;
        }
        if (!message.timeoutTimestamp.equals(Long.UZERO)) {
            obj.timeoutTimestamp = (message.timeoutTimestamp || Long.UZERO).toString();
        }
        if (message.payloads?.length) {
            obj.payloads = message.payloads.map((e) => Payload.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Packet.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePacket();
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? Long.fromValue(object.sequence)
            : Long.UZERO;
        message.sourceClient = object.sourceClient ?? "";
        message.destinationClient = object.destinationClient ?? "";
        message.timeoutTimestamp = (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null)
            ? Long.fromValue(object.timeoutTimestamp)
            : Long.UZERO;
        message.payloads = object.payloads?.map((e) => Payload.fromPartial(e)) || [];
        return message;
    },
};
function createBasePayload() {
    return { sourcePort: "", destinationPort: "", version: "", encoding: "", value: new Uint8Array(0) };
}
export const Payload = {
    encode(message, writer = new BinaryWriter()) {
        if (message.sourcePort !== "") {
            writer.uint32(10).string(message.sourcePort);
        }
        if (message.destinationPort !== "") {
            writer.uint32(18).string(message.destinationPort);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        if (message.encoding !== "") {
            writer.uint32(34).string(message.encoding);
        }
        if (message.value.length !== 0) {
            writer.uint32(42).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.sourcePort = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.destinationPort = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.encoding = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.value = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sourcePort: isSet(object.sourcePort) ? globalThis.String(object.sourcePort) : "",
            destinationPort: isSet(object.destinationPort) ? globalThis.String(object.destinationPort) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            encoding: isSet(object.encoding) ? globalThis.String(object.encoding) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sourcePort !== "") {
            obj.sourcePort = message.sourcePort;
        }
        if (message.destinationPort !== "") {
            obj.destinationPort = message.destinationPort;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.encoding !== "") {
            obj.encoding = message.encoding;
        }
        if (message.value.length !== 0) {
            obj.value = base64FromBytes(message.value);
        }
        return obj;
    },
    create(base) {
        return Payload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePayload();
        message.sourcePort = object.sourcePort ?? "";
        message.destinationPort = object.destinationPort ?? "";
        message.version = object.version ?? "";
        message.encoding = object.encoding ?? "";
        message.value = object.value ?? new Uint8Array(0);
        return message;
    },
};
function createBaseAcknowledgement() {
    return { appAcknowledgements: [] };
}
export const Acknowledgement = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.appAcknowledgements) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcknowledgement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.appAcknowledgements.push(reader.bytes());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appAcknowledgements: globalThis.Array.isArray(object?.appAcknowledgements)
                ? object.appAcknowledgements.map((e) => bytesFromBase64(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appAcknowledgements?.length) {
            obj.appAcknowledgements = message.appAcknowledgements.map((e) => base64FromBytes(e));
        }
        return obj;
    },
    create(base) {
        return Acknowledgement.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAcknowledgement();
        message.appAcknowledgements = object.appAcknowledgements?.map((e) => e) || [];
        return message;
    },
};
function createBaseRecvPacketResult() {
    return { status: 0, acknowledgement: new Uint8Array(0) };
}
export const RecvPacketResult = {
    encode(message, writer = new BinaryWriter()) {
        if (message.status !== 0) {
            writer.uint32(8).int32(message.status);
        }
        if (message.acknowledgement.length !== 0) {
            writer.uint32(18).bytes(message.acknowledgement);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecvPacketResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.acknowledgement = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            status: isSet(object.status) ? packetStatusFromJSON(object.status) : 0,
            acknowledgement: isSet(object.acknowledgement) ? bytesFromBase64(object.acknowledgement) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.status !== 0) {
            obj.status = packetStatusToJSON(message.status);
        }
        if (message.acknowledgement.length !== 0) {
            obj.acknowledgement = base64FromBytes(message.acknowledgement);
        }
        return obj;
    },
    create(base) {
        return RecvPacketResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRecvPacketResult();
        message.status = object.status ?? 0;
        message.acknowledgement = object.acknowledgement ?? new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
