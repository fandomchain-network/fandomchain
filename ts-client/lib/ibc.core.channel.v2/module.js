// Generated by Ignite ignite.com/cli
import { SigningStargateClient } from "@cosmjs/stargate";
import { Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { Api } from "./rest";
import { MsgSendPacket } from "./types/ibc/core/channel/v2/tx";
import { MsgRecvPacket } from "./types/ibc/core/channel/v2/tx";
import { MsgTimeout } from "./types/ibc/core/channel/v2/tx";
import { MsgAcknowledgement } from "./types/ibc/core/channel/v2/tx";
import { PacketState as typePacketState } from "./types";
import { PacketSequence as typePacketSequence } from "./types";
import { Packet as typePacket } from "./types";
import { Payload as typePayload } from "./types";
import { Acknowledgement as typeAcknowledgement } from "./types";
import { RecvPacketResult as typeRecvPacketResult } from "./types";
export { MsgSendPacket, MsgRecvPacket, MsgTimeout, MsgAcknowledgement };
export const registry = new Registry(msgTypes);
function getStructure(template) {
    const structure = { fields: [] };
    for (let [key, value] of Object.entries(template)) {
        let field = { name: key, type: typeof value };
        structure.fields.push(field);
    }
    return structure;
}
const defaultFee = {
    amount: [],
    gas: "200000",
};
export const txClient = ({ signer, prefix, addr } = { addr: "http://localhost:26657", prefix: "cosmos" }) => {
    return {
        async sendMsgSendPacket({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgSendPacket: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgSendPacket({ value: MsgSendPacket.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgSendPacket: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgRecvPacket({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgRecvPacket: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgRecvPacket({ value: MsgRecvPacket.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgRecvPacket: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgTimeout({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgTimeout: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgTimeout({ value: MsgTimeout.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgTimeout: Could not broadcast Tx: ' + e.message);
            }
        },
        async sendMsgAcknowledgement({ value, fee, memo }) {
            if (!signer) {
                throw new Error('TxClient:sendMsgAcknowledgement: Unable to sign Tx. Signer is not present.');
            }
            try {
                const { address } = (await signer.getAccounts())[0];
                const signingClient = await SigningStargateClient.connectWithSigner(addr, signer, { registry });
                let msg = this.msgAcknowledgement({ value: MsgAcknowledgement.fromPartial(value) });
                return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo);
            }
            catch (e) {
                throw new Error('TxClient:sendMsgAcknowledgement: Could not broadcast Tx: ' + e.message);
            }
        },
        msgSendPacket({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v2.MsgSendPacket", value: MsgSendPacket.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgSendPacket: Could not create message: ' + e.message);
            }
        },
        msgRecvPacket({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v2.MsgRecvPacket", value: MsgRecvPacket.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgRecvPacket: Could not create message: ' + e.message);
            }
        },
        msgTimeout({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v2.MsgTimeout", value: MsgTimeout.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgTimeout: Could not create message: ' + e.message);
            }
        },
        msgAcknowledgement({ value }) {
            try {
                return { typeUrl: "/ibc.core.channel.v2.MsgAcknowledgement", value: MsgAcknowledgement.fromPartial(value) };
            }
            catch (e) {
                throw new Error('TxClient:MsgAcknowledgement: Could not create message: ' + e.message);
            }
        },
    };
};
export const queryClient = ({ addr: addr } = { addr: "http://localhost:1317" }) => {
    return new Api({ baseURL: addr });
};
class SDKModule {
    constructor(client) {
        this.registry = [];
        this.query = queryClient({ addr: client.env.apiURL });
        this.updateTX(client);
        this.structure = {
            PacketState: getStructure(typePacketState.fromPartial({})),
            PacketSequence: getStructure(typePacketSequence.fromPartial({})),
            Packet: getStructure(typePacket.fromPartial({})),
            Payload: getStructure(typePayload.fromPartial({})),
            Acknowledgement: getStructure(typeAcknowledgement.fromPartial({})),
            RecvPacketResult: getStructure(typeRecvPacketResult.fromPartial({})),
        };
        client.on('signer-changed', (signer) => {
            this.updateTX(client);
        });
    }
    updateTX(client) {
        const methods = txClient({
            signer: client.signer,
            addr: client.env.rpcURL,
            prefix: client.env.prefix ?? "cosmos",
        });
        this.tx = methods;
        for (let m in methods) {
            this.tx[m] = methods[m].bind(this.tx);
        }
    }
}
;
const IgntModule = (test) => {
    return {
        module: {
            IbcCoreChannelV_2: new SDKModule(test)
        },
        registry: msgTypes
    };
};
export default IgntModule;
