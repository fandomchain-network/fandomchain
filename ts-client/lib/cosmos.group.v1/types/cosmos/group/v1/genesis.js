// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/group/v1/genesis.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { GroupInfo, GroupMember, GroupPolicyInfo, Proposal, Vote } from "./types";
export const protobufPackage = "cosmos.group.v1";
function createBaseGenesisState() {
    return {
        groupSeq: Long.UZERO,
        groups: [],
        groupMembers: [],
        groupPolicySeq: Long.UZERO,
        groupPolicies: [],
        proposalSeq: Long.UZERO,
        proposals: [],
        votes: [],
    };
}
export const GenesisState = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.groupSeq.equals(Long.UZERO)) {
            writer.uint32(8).uint64(message.groupSeq.toString());
        }
        for (const v of message.groups) {
            GroupInfo.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.groupMembers) {
            GroupMember.encode(v, writer.uint32(26).fork()).join();
        }
        if (!message.groupPolicySeq.equals(Long.UZERO)) {
            writer.uint32(32).uint64(message.groupPolicySeq.toString());
        }
        for (const v of message.groupPolicies) {
            GroupPolicyInfo.encode(v, writer.uint32(42).fork()).join();
        }
        if (!message.proposalSeq.equals(Long.UZERO)) {
            writer.uint32(48).uint64(message.proposalSeq.toString());
        }
        for (const v of message.proposals) {
            Proposal.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.votes) {
            Vote.encode(v, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupSeq = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groups.push(GroupInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.groupMembers.push(GroupMember.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.groupPolicySeq = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.groupPolicies.push(GroupPolicyInfo.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.proposalSeq = Long.fromString(reader.uint64().toString(), true);
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.proposals.push(Proposal.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.votes.push(Vote.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupSeq: isSet(object.groupSeq) ? Long.fromValue(object.groupSeq) : Long.UZERO,
            groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e) => GroupInfo.fromJSON(e)) : [],
            groupMembers: globalThis.Array.isArray(object?.groupMembers)
                ? object.groupMembers.map((e) => GroupMember.fromJSON(e))
                : [],
            groupPolicySeq: isSet(object.groupPolicySeq) ? Long.fromValue(object.groupPolicySeq) : Long.UZERO,
            groupPolicies: globalThis.Array.isArray(object?.groupPolicies)
                ? object.groupPolicies.map((e) => GroupPolicyInfo.fromJSON(e))
                : [],
            proposalSeq: isSet(object.proposalSeq) ? Long.fromValue(object.proposalSeq) : Long.UZERO,
            proposals: globalThis.Array.isArray(object?.proposals)
                ? object.proposals.map((e) => Proposal.fromJSON(e))
                : [],
            votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e) => Vote.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.groupSeq.equals(Long.UZERO)) {
            obj.groupSeq = (message.groupSeq || Long.UZERO).toString();
        }
        if (message.groups?.length) {
            obj.groups = message.groups.map((e) => GroupInfo.toJSON(e));
        }
        if (message.groupMembers?.length) {
            obj.groupMembers = message.groupMembers.map((e) => GroupMember.toJSON(e));
        }
        if (!message.groupPolicySeq.equals(Long.UZERO)) {
            obj.groupPolicySeq = (message.groupPolicySeq || Long.UZERO).toString();
        }
        if (message.groupPolicies?.length) {
            obj.groupPolicies = message.groupPolicies.map((e) => GroupPolicyInfo.toJSON(e));
        }
        if (!message.proposalSeq.equals(Long.UZERO)) {
            obj.proposalSeq = (message.proposalSeq || Long.UZERO).toString();
        }
        if (message.proposals?.length) {
            obj.proposals = message.proposals.map((e) => Proposal.toJSON(e));
        }
        if (message.votes?.length) {
            obj.votes = message.votes.map((e) => Vote.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.groupSeq = (object.groupSeq !== undefined && object.groupSeq !== null)
            ? Long.fromValue(object.groupSeq)
            : Long.UZERO;
        message.groups = object.groups?.map((e) => GroupInfo.fromPartial(e)) || [];
        message.groupMembers = object.groupMembers?.map((e) => GroupMember.fromPartial(e)) || [];
        message.groupPolicySeq = (object.groupPolicySeq !== undefined && object.groupPolicySeq !== null)
            ? Long.fromValue(object.groupPolicySeq)
            : Long.UZERO;
        message.groupPolicies = object.groupPolicies?.map((e) => GroupPolicyInfo.fromPartial(e)) || [];
        message.proposalSeq = (object.proposalSeq !== undefined && object.proposalSeq !== null)
            ? Long.fromValue(object.proposalSeq)
            : Long.UZERO;
        message.proposals = object.proposals?.map((e) => Proposal.fromPartial(e)) || [];
        message.votes = object.votes?.map((e) => Vote.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
