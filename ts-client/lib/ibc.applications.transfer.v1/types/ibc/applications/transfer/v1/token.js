// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/applications/transfer/v1/token.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "ibc.applications.transfer.v1";
function createBaseToken() {
    return { denom: undefined, amount: "" };
}
export const Token = {
    encode(message, writer = new BinaryWriter()) {
        if (message.denom !== undefined) {
            Denom.encode(message.denom, writer.uint32(10).fork()).join();
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = Denom.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? Denom.fromJSON(object.denom) : undefined,
            amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== undefined) {
            obj.denom = Denom.toJSON(message.denom);
        }
        if (message.amount !== "") {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return Token.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseToken();
        message.denom = (object.denom !== undefined && object.denom !== null) ? Denom.fromPartial(object.denom) : undefined;
        message.amount = object.amount ?? "";
        return message;
    },
};
function createBaseDenom() {
    return { base: "", trace: [] };
}
export const Denom = {
    encode(message, writer = new BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        for (const v of message.trace) {
            Hop.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.base = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.trace.push(Hop.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            trace: globalThis.Array.isArray(object?.trace) ? object.trace.map((e) => Hop.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.trace?.length) {
            obj.trace = message.trace.map((e) => Hop.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Denom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDenom();
        message.base = object.base ?? "";
        message.trace = object.trace?.map((e) => Hop.fromPartial(e)) || [];
        return message;
    },
};
function createBaseHop() {
    return { portId: "", channelId: "" };
}
export const Hop = {
    encode(message, writer = new BinaryWriter()) {
        if (message.portId !== "") {
            writer.uint32(10).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(18).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHop();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.portId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.channelId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            portId: isSet(object.portId) ? globalThis.String(object.portId) : "",
            channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.portId !== "") {
            obj.portId = message.portId;
        }
        if (message.channelId !== "") {
            obj.channelId = message.channelId;
        }
        return obj;
    },
    create(base) {
        return Hop.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHop();
        message.portId = object.portId ?? "";
        message.channelId = object.channelId ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
