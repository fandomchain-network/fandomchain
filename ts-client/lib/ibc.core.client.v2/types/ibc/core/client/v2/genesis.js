// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/genesis.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CounterpartyInfo } from "./counterparty";
export const protobufPackage = "ibc.core.client.v2";
function createBaseGenesisCounterpartyInfo() {
    return { clientId: "", counterpartyInfo: undefined };
}
export const GenesisCounterpartyInfo = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.counterpartyInfo !== undefined) {
            CounterpartyInfo.encode(message.counterpartyInfo, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisCounterpartyInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.counterpartyInfo = CounterpartyInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            counterpartyInfo: isSet(object.counterpartyInfo) ? CounterpartyInfo.fromJSON(object.counterpartyInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.counterpartyInfo !== undefined) {
            obj.counterpartyInfo = CounterpartyInfo.toJSON(message.counterpartyInfo);
        }
        return obj;
    },
    create(base) {
        return GenesisCounterpartyInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisCounterpartyInfo();
        message.clientId = object.clientId ?? "";
        message.counterpartyInfo = (object.counterpartyInfo !== undefined && object.counterpartyInfo !== null)
            ? CounterpartyInfo.fromPartial(object.counterpartyInfo)
            : undefined;
        return message;
    },
};
function createBaseGenesisState() {
    return { counterpartyInfos: [] };
}
export const GenesisState = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.counterpartyInfos) {
            GenesisCounterpartyInfo.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.counterpartyInfos.push(GenesisCounterpartyInfo.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            counterpartyInfos: globalThis.Array.isArray(object?.counterpartyInfos)
                ? object.counterpartyInfos.map((e) => GenesisCounterpartyInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.counterpartyInfos?.length) {
            obj.counterpartyInfos = message.counterpartyInfos.map((e) => GenesisCounterpartyInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.counterpartyInfos = object.counterpartyInfos?.map((e) => GenesisCounterpartyInfo.fromPartial(e)) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
