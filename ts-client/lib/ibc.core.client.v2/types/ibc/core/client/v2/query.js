// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/query.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Config } from "./config";
import { CounterpartyInfo } from "./counterparty";
export const protobufPackage = "ibc.core.client.v2";
function createBaseQueryCounterpartyInfoRequest() {
    return { clientId: "" };
}
export const QueryCounterpartyInfoRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCounterpartyInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        return obj;
    },
    create(base) {
        return QueryCounterpartyInfoRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCounterpartyInfoRequest();
        message.clientId = object.clientId ?? "";
        return message;
    },
};
function createBaseQueryCounterpartyInfoResponse() {
    return { counterpartyInfo: undefined };
}
export const QueryCounterpartyInfoResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.counterpartyInfo !== undefined) {
            CounterpartyInfo.encode(message.counterpartyInfo, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCounterpartyInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.counterpartyInfo = CounterpartyInfo.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            counterpartyInfo: isSet(object.counterpartyInfo) ? CounterpartyInfo.fromJSON(object.counterpartyInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.counterpartyInfo !== undefined) {
            obj.counterpartyInfo = CounterpartyInfo.toJSON(message.counterpartyInfo);
        }
        return obj;
    },
    create(base) {
        return QueryCounterpartyInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryCounterpartyInfoResponse();
        message.counterpartyInfo = (object.counterpartyInfo !== undefined && object.counterpartyInfo !== null)
            ? CounterpartyInfo.fromPartial(object.counterpartyInfo)
            : undefined;
        return message;
    },
};
function createBaseQueryConfigRequest() {
    return { clientId: "" };
}
export const QueryConfigRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        return obj;
    },
    create(base) {
        return QueryConfigRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryConfigRequest();
        message.clientId = object.clientId ?? "";
        return message;
    },
};
function createBaseQueryConfigResponse() {
    return { config: undefined };
}
export const QueryConfigResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.config !== undefined) {
            Config.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.config = Config.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? Config.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = Config.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return QueryConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryConfigResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? Config.fromPartial(object.config)
            : undefined;
        return message;
    },
};
export const QueryServiceName = "ibc.core.client.v2.Query";
export class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || QueryServiceName;
        this.rpc = rpc;
        this.CounterpartyInfo = this.CounterpartyInfo.bind(this);
        this.Config = this.Config.bind(this);
    }
    CounterpartyInfo(request) {
        const data = QueryCounterpartyInfoRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CounterpartyInfo", data);
        return promise.then((data) => QueryCounterpartyInfoResponse.decode(new BinaryReader(data)));
    }
    Config(request) {
        const data = QueryConfigRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Config", data);
        return promise.then((data) => QueryConfigResponse.decode(new BinaryReader(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
