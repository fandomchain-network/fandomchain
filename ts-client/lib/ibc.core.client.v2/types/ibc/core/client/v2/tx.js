// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/tx.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Config } from "./config";
export const protobufPackage = "ibc.core.client.v2";
function createBaseMsgRegisterCounterparty() {
    return { clientId: "", counterpartyMerklePrefix: [], counterpartyClientId: "", signer: "" };
}
export const MsgRegisterCounterparty = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        for (const v of message.counterpartyMerklePrefix) {
            writer.uint32(18).bytes(v);
        }
        if (message.counterpartyClientId !== "") {
            writer.uint32(26).string(message.counterpartyClientId);
        }
        if (message.signer !== "") {
            writer.uint32(34).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRegisterCounterparty();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.counterpartyMerklePrefix.push(reader.bytes());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.counterpartyClientId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            counterpartyMerklePrefix: globalThis.Array.isArray(object?.counterpartyMerklePrefix)
                ? object.counterpartyMerklePrefix.map((e) => bytesFromBase64(e))
                : [],
            counterpartyClientId: isSet(object.counterpartyClientId) ? globalThis.String(object.counterpartyClientId) : "",
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.counterpartyMerklePrefix?.length) {
            obj.counterpartyMerklePrefix = message.counterpartyMerklePrefix.map((e) => base64FromBytes(e));
        }
        if (message.counterpartyClientId !== "") {
            obj.counterpartyClientId = message.counterpartyClientId;
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return MsgRegisterCounterparty.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRegisterCounterparty();
        message.clientId = object.clientId ?? "";
        message.counterpartyMerklePrefix = object.counterpartyMerklePrefix?.map((e) => e) || [];
        message.counterpartyClientId = object.counterpartyClientId ?? "";
        message.signer = object.signer ?? "";
        return message;
    },
};
function createBaseMsgRegisterCounterpartyResponse() {
    return {};
}
export const MsgRegisterCounterpartyResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRegisterCounterpartyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgRegisterCounterpartyResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgRegisterCounterpartyResponse();
        return message;
    },
};
function createBaseMsgUpdateClientConfig() {
    return { clientId: "", config: undefined, signer: "" };
}
export const MsgUpdateClientConfig = {
    encode(message, writer = new BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.config !== undefined) {
            Config.encode(message.config, writer.uint32(18).fork()).join();
        }
        if (message.signer !== "") {
            writer.uint32(26).string(message.signer);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateClientConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.config = Config.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.signer = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            config: isSet(object.config) ? Config.fromJSON(object.config) : undefined,
            signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.config !== undefined) {
            obj.config = Config.toJSON(message.config);
        }
        if (message.signer !== "") {
            obj.signer = message.signer;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateClientConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateClientConfig();
        message.clientId = object.clientId ?? "";
        message.config = (object.config !== undefined && object.config !== null)
            ? Config.fromPartial(object.config)
            : undefined;
        message.signer = object.signer ?? "";
        return message;
    },
};
function createBaseMsgUpdateClientConfigResponse() {
    return {};
}
export const MsgUpdateClientConfigResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateClientConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateClientConfigResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateClientConfigResponse();
        return message;
    },
};
export const MsgServiceName = "ibc.core.client.v2.Msg";
export class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || MsgServiceName;
        this.rpc = rpc;
        this.RegisterCounterparty = this.RegisterCounterparty.bind(this);
        this.UpdateClientConfig = this.UpdateClientConfig.bind(this);
    }
    RegisterCounterparty(request) {
        const data = MsgRegisterCounterparty.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterCounterparty", data);
        return promise.then((data) => MsgRegisterCounterpartyResponse.decode(new BinaryReader(data)));
    }
    UpdateClientConfig(request) {
        const data = MsgUpdateClientConfig.encode(request).finish();
        const promise = this.rpc.request(this.service, "UpdateClientConfig", data);
        return promise.then((data) => MsgUpdateClientConfigResponse.decode(new BinaryReader(data)));
    }
}
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
