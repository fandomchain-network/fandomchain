// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/counterparty.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "ibc.core.client.v2";
function createBaseCounterpartyInfo() {
    return { merklePrefix: [], clientId: "" };
}
export const CounterpartyInfo = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.merklePrefix) {
            writer.uint32(10).bytes(v);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCounterpartyInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.merklePrefix.push(reader.bytes());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            merklePrefix: globalThis.Array.isArray(object?.merklePrefix)
                ? object.merklePrefix.map((e) => bytesFromBase64(e))
                : [],
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.merklePrefix?.length) {
            obj.merklePrefix = message.merklePrefix.map((e) => base64FromBytes(e));
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        return obj;
    },
    create(base) {
        return CounterpartyInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCounterpartyInfo();
        message.merklePrefix = object.merklePrefix?.map((e) => e) || [];
        message.clientId = object.clientId ?? "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
