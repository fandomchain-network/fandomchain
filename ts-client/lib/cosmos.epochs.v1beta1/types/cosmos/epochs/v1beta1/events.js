// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/epochs/v1beta1/events.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
export const protobufPackage = "cosmos.epochs.v1beta1";
function createBaseEventEpochEnd() {
    return { epochNumber: Long.ZERO };
}
export const EventEpochEnd = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.epochNumber.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.epochNumber.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEpochEnd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.epochNumber = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { epochNumber: isSet(object.epochNumber) ? Long.fromValue(object.epochNumber) : Long.ZERO };
    },
    toJSON(message) {
        const obj = {};
        if (!message.epochNumber.equals(Long.ZERO)) {
            obj.epochNumber = (message.epochNumber || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return EventEpochEnd.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventEpochEnd();
        message.epochNumber = (object.epochNumber !== undefined && object.epochNumber !== null)
            ? Long.fromValue(object.epochNumber)
            : Long.ZERO;
        return message;
    },
};
function createBaseEventEpochStart() {
    return { epochNumber: Long.ZERO, epochStartTime: Long.ZERO };
}
export const EventEpochStart = {
    encode(message, writer = new BinaryWriter()) {
        if (!message.epochNumber.equals(Long.ZERO)) {
            writer.uint32(8).int64(message.epochNumber.toString());
        }
        if (!message.epochStartTime.equals(Long.ZERO)) {
            writer.uint32(16).int64(message.epochStartTime.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEpochStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.epochNumber = Long.fromString(reader.int64().toString());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.epochStartTime = Long.fromString(reader.int64().toString());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochNumber: isSet(object.epochNumber) ? Long.fromValue(object.epochNumber) : Long.ZERO,
            epochStartTime: isSet(object.epochStartTime) ? Long.fromValue(object.epochStartTime) : Long.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (!message.epochNumber.equals(Long.ZERO)) {
            obj.epochNumber = (message.epochNumber || Long.ZERO).toString();
        }
        if (!message.epochStartTime.equals(Long.ZERO)) {
            obj.epochStartTime = (message.epochStartTime || Long.ZERO).toString();
        }
        return obj;
    },
    create(base) {
        return EventEpochStart.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventEpochStart();
        message.epochNumber = (object.epochNumber !== undefined && object.epochNumber !== null)
            ? Long.fromValue(object.epochNumber)
            : Long.ZERO;
        message.epochStartTime = (object.epochStartTime !== undefined && object.epochStartTime !== null)
            ? Long.fromValue(object.epochStartTime)
            : Long.ZERO;
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
