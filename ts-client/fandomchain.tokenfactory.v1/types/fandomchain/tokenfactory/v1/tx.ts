// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Params } from "./params";

export const protobufPackage = "fandomchain.tokenfactory.v1";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params?: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

/** MsgCreateDenom defines the MsgCreateDenom message. */
export interface MsgCreateDenom {
  owner: string;
  denom: string;
  description: string;
  ticker: string;
  url: string;
}

/** MsgCreateDenomResponse defines the MsgCreateDenomResponse message. */
export interface MsgCreateDenomResponse {
}

/** MsgBuyWithBondingCurve defines the MsgBuyWithBondingCurve message. */
export interface MsgBuyWithBondingCurve {
  buyer: string;
  denom: string;
  /** Amount of FandomChain tokens to spend */
  fandomAmount: Long;
  /** Minimum tokens expected (slippage protection) */
  minTokensOut: Long;
}

/** MsgBuyWithBondingCurveResponse defines the response. */
export interface MsgBuyWithBondingCurveResponse {
  tokensReceived: Long;
}

/** MsgSellWithBondingCurve defines the MsgSellWithBondingCurve message. */
export interface MsgSellWithBondingCurve {
  seller: string;
  denom: string;
  /** Amount of tokens to sell */
  tokenAmount: Long;
  /** Minimum FandomChain tokens expected (slippage protection) */
  minFandomOut: Long;
}

/** MsgSellWithBondingCurveResponse defines the response. */
export interface MsgSellWithBondingCurveResponse {
  fandomReceived: Long;
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateDenom(): MsgCreateDenom {
  return { owner: "", denom: "", description: "", ticker: "", url: "" };
}

export const MsgCreateDenom: MessageFns<MsgCreateDenom> = {
  encode(message: MsgCreateDenom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.ticker !== "") {
      writer.uint32(34).string(message.ticker);
    }
    if (message.url !== "") {
      writer.uint32(42).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateDenom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ticker = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateDenom {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: MsgCreateDenom): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.ticker !== "") {
      obj.ticker = message.ticker;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDenom>, I>>(base?: I): MsgCreateDenom {
    return MsgCreateDenom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDenom>, I>>(object: I): MsgCreateDenom {
    const message = createBaseMsgCreateDenom();
    message.owner = object.owner ?? "";
    message.denom = object.denom ?? "";
    message.description = object.description ?? "";
    message.ticker = object.ticker ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseMsgCreateDenomResponse(): MsgCreateDenomResponse {
  return {};
}

export const MsgCreateDenomResponse: MessageFns<MsgCreateDenomResponse> = {
  encode(_: MsgCreateDenomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateDenomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateDenomResponse {
    return {};
  },

  toJSON(_: MsgCreateDenomResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateDenomResponse>, I>>(base?: I): MsgCreateDenomResponse {
    return MsgCreateDenomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateDenomResponse>, I>>(_: I): MsgCreateDenomResponse {
    const message = createBaseMsgCreateDenomResponse();
    return message;
  },
};

function createBaseMsgBuyWithBondingCurve(): MsgBuyWithBondingCurve {
  return { buyer: "", denom: "", fandomAmount: Long.ZERO, minTokensOut: Long.ZERO };
}

export const MsgBuyWithBondingCurve: MessageFns<MsgBuyWithBondingCurve> = {
  encode(message: MsgBuyWithBondingCurve, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buyer !== "") {
      writer.uint32(10).string(message.buyer);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (!message.fandomAmount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.fandomAmount.toString());
    }
    if (!message.minTokensOut.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.minTokensOut.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBuyWithBondingCurve {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuyWithBondingCurve();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buyer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fandomAmount = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minTokensOut = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBuyWithBondingCurve {
    return {
      buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      fandomAmount: isSet(object.fandomAmount) ? Long.fromValue(object.fandomAmount) : Long.ZERO,
      minTokensOut: isSet(object.minTokensOut) ? Long.fromValue(object.minTokensOut) : Long.ZERO,
    };
  },

  toJSON(message: MsgBuyWithBondingCurve): unknown {
    const obj: any = {};
    if (message.buyer !== "") {
      obj.buyer = message.buyer;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (!message.fandomAmount.equals(Long.ZERO)) {
      obj.fandomAmount = (message.fandomAmount || Long.ZERO).toString();
    }
    if (!message.minTokensOut.equals(Long.ZERO)) {
      obj.minTokensOut = (message.minTokensOut || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuyWithBondingCurve>, I>>(base?: I): MsgBuyWithBondingCurve {
    return MsgBuyWithBondingCurve.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuyWithBondingCurve>, I>>(object: I): MsgBuyWithBondingCurve {
    const message = createBaseMsgBuyWithBondingCurve();
    message.buyer = object.buyer ?? "";
    message.denom = object.denom ?? "";
    message.fandomAmount = (object.fandomAmount !== undefined && object.fandomAmount !== null)
      ? Long.fromValue(object.fandomAmount)
      : Long.ZERO;
    message.minTokensOut = (object.minTokensOut !== undefined && object.minTokensOut !== null)
      ? Long.fromValue(object.minTokensOut)
      : Long.ZERO;
    return message;
  },
};

function createBaseMsgBuyWithBondingCurveResponse(): MsgBuyWithBondingCurveResponse {
  return { tokensReceived: Long.ZERO };
}

export const MsgBuyWithBondingCurveResponse: MessageFns<MsgBuyWithBondingCurveResponse> = {
  encode(message: MsgBuyWithBondingCurveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.tokensReceived.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.tokensReceived.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBuyWithBondingCurveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBuyWithBondingCurveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tokensReceived = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBuyWithBondingCurveResponse {
    return { tokensReceived: isSet(object.tokensReceived) ? Long.fromValue(object.tokensReceived) : Long.ZERO };
  },

  toJSON(message: MsgBuyWithBondingCurveResponse): unknown {
    const obj: any = {};
    if (!message.tokensReceived.equals(Long.ZERO)) {
      obj.tokensReceived = (message.tokensReceived || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgBuyWithBondingCurveResponse>, I>>(base?: I): MsgBuyWithBondingCurveResponse {
    return MsgBuyWithBondingCurveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgBuyWithBondingCurveResponse>, I>>(
    object: I,
  ): MsgBuyWithBondingCurveResponse {
    const message = createBaseMsgBuyWithBondingCurveResponse();
    message.tokensReceived = (object.tokensReceived !== undefined && object.tokensReceived !== null)
      ? Long.fromValue(object.tokensReceived)
      : Long.ZERO;
    return message;
  },
};

function createBaseMsgSellWithBondingCurve(): MsgSellWithBondingCurve {
  return { seller: "", denom: "", tokenAmount: Long.ZERO, minFandomOut: Long.ZERO };
}

export const MsgSellWithBondingCurve: MessageFns<MsgSellWithBondingCurve> = {
  encode(message: MsgSellWithBondingCurve, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seller !== "") {
      writer.uint32(10).string(message.seller);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (!message.tokenAmount.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.tokenAmount.toString());
    }
    if (!message.minFandomOut.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.minFandomOut.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSellWithBondingCurve {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSellWithBondingCurve();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.seller = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tokenAmount = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minFandomOut = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSellWithBondingCurve {
    return {
      seller: isSet(object.seller) ? globalThis.String(object.seller) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      tokenAmount: isSet(object.tokenAmount) ? Long.fromValue(object.tokenAmount) : Long.ZERO,
      minFandomOut: isSet(object.minFandomOut) ? Long.fromValue(object.minFandomOut) : Long.ZERO,
    };
  },

  toJSON(message: MsgSellWithBondingCurve): unknown {
    const obj: any = {};
    if (message.seller !== "") {
      obj.seller = message.seller;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (!message.tokenAmount.equals(Long.ZERO)) {
      obj.tokenAmount = (message.tokenAmount || Long.ZERO).toString();
    }
    if (!message.minFandomOut.equals(Long.ZERO)) {
      obj.minFandomOut = (message.minFandomOut || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSellWithBondingCurve>, I>>(base?: I): MsgSellWithBondingCurve {
    return MsgSellWithBondingCurve.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSellWithBondingCurve>, I>>(object: I): MsgSellWithBondingCurve {
    const message = createBaseMsgSellWithBondingCurve();
    message.seller = object.seller ?? "";
    message.denom = object.denom ?? "";
    message.tokenAmount = (object.tokenAmount !== undefined && object.tokenAmount !== null)
      ? Long.fromValue(object.tokenAmount)
      : Long.ZERO;
    message.minFandomOut = (object.minFandomOut !== undefined && object.minFandomOut !== null)
      ? Long.fromValue(object.minFandomOut)
      : Long.ZERO;
    return message;
  },
};

function createBaseMsgSellWithBondingCurveResponse(): MsgSellWithBondingCurveResponse {
  return { fandomReceived: Long.ZERO };
}

export const MsgSellWithBondingCurveResponse: MessageFns<MsgSellWithBondingCurveResponse> = {
  encode(message: MsgSellWithBondingCurveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.fandomReceived.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.fandomReceived.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSellWithBondingCurveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSellWithBondingCurveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fandomReceived = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSellWithBondingCurveResponse {
    return { fandomReceived: isSet(object.fandomReceived) ? Long.fromValue(object.fandomReceived) : Long.ZERO };
  },

  toJSON(message: MsgSellWithBondingCurveResponse): unknown {
    const obj: any = {};
    if (!message.fandomReceived.equals(Long.ZERO)) {
      obj.fandomReceived = (message.fandomReceived || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSellWithBondingCurveResponse>, I>>(base?: I): MsgSellWithBondingCurveResponse {
    return MsgSellWithBondingCurveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSellWithBondingCurveResponse>, I>>(
    object: I,
  ): MsgSellWithBondingCurveResponse {
    const message = createBaseMsgSellWithBondingCurveResponse();
    message.fandomReceived = (object.fandomReceived !== undefined && object.fandomReceived !== null)
      ? Long.fromValue(object.fandomReceived)
      : Long.ZERO;
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /** CreateDenom defines the CreateDenom RPC. */
  CreateDenom(request: MsgCreateDenom): Promise<MsgCreateDenomResponse>;
  /** BuyWithBondingCurve defines the BuyWithBondingCurve RPC. */
  BuyWithBondingCurve(request: MsgBuyWithBondingCurve): Promise<MsgBuyWithBondingCurveResponse>;
  /** SellWithBondingCurve defines the SellWithBondingCurve RPC. */
  SellWithBondingCurve(request: MsgSellWithBondingCurve): Promise<MsgSellWithBondingCurveResponse>;
}

export const MsgServiceName = "fandomchain.tokenfactory.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateDenom = this.CreateDenom.bind(this);
    this.BuyWithBondingCurve = this.BuyWithBondingCurve.bind(this);
    this.SellWithBondingCurve = this.SellWithBondingCurve.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateDenom(request: MsgCreateDenom): Promise<MsgCreateDenomResponse> {
    const data = MsgCreateDenom.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateDenom", data);
    return promise.then((data) => MsgCreateDenomResponse.decode(new BinaryReader(data)));
  }

  BuyWithBondingCurve(request: MsgBuyWithBondingCurve): Promise<MsgBuyWithBondingCurveResponse> {
    const data = MsgBuyWithBondingCurve.encode(request).finish();
    const promise = this.rpc.request(this.service, "BuyWithBondingCurve", data);
    return promise.then((data) => MsgBuyWithBondingCurveResponse.decode(new BinaryReader(data)));
  }

  SellWithBondingCurve(request: MsgSellWithBondingCurve): Promise<MsgSellWithBondingCurveResponse> {
    const data = MsgSellWithBondingCurve.encode(request).finish();
    const promise = this.rpc.request(this.service, "SellWithBondingCurve", data);
    return promise.then((data) => MsgSellWithBondingCurveResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
