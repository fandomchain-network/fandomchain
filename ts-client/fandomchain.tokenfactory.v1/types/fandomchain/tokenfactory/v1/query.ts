// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fandomchain/tokenfactory/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Denom } from "./denom";
import { Params } from "./params";

export const protobufPackage = "fandomchain.tokenfactory.v1";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params?: Params | undefined;
}

/** QueryGetDenomRequest defines the QueryGetDenomRequest message. */
export interface QueryGetDenomRequest {
  denom: string;
}

/** QueryGetDenomResponse defines the QueryGetDenomResponse message. */
export interface QueryGetDenomResponse {
  denom?: Denom | undefined;
}

/** QueryAllDenomRequest defines the QueryAllDenomRequest message. */
export interface QueryAllDenomRequest {
  pagination?: PageRequest | undefined;
}

/** QueryAllDenomResponse defines the QueryAllDenomResponse message. */
export interface QueryAllDenomResponse {
  denom: Denom[];
  pagination?: PageResponse | undefined;
}

/** QueryGetBondingCurvePriceRequest defines the request for getting bonding curve price */
export interface QueryGetBondingCurvePriceRequest {
  denom: string;
}

/** QueryGetBondingCurvePriceResponse defines the response for bonding curve price */
export interface QueryGetBondingCurvePriceResponse {
  /** Price as a decimal string */
  price: string;
}

/** QueryGetBondingCurveProgressRequest defines the request for bonding curve progress */
export interface QueryGetBondingCurveProgressRequest {
  denom: string;
}

/** QueryGetBondingCurveProgressResponse defines the response for bonding curve progress */
export interface QueryGetBondingCurveProgressResponse {
  /** Progress as a percentage (0-100) */
  progress: string;
  tokensSold: Long;
  tokensRemaining: Long;
}

/** QueryEstimateBuyRequest defines the request for estimating a buy */
export interface QueryEstimateBuyRequest {
  denom: string;
  fandomAmount: Long;
}

/** QueryEstimateBuyResponse defines the response for estimating a buy */
export interface QueryEstimateBuyResponse {
  tokensOut: Long;
  /** Price impact as percentage */
  priceImpact: string;
}

/** QueryEstimateSellRequest defines the request for estimating a sell */
export interface QueryEstimateSellRequest {
  denom: string;
  tokenAmount: Long;
}

/** QueryEstimateSellResponse defines the response for estimating a sell */
export interface QueryEstimateSellResponse {
  fandomOut: Long;
  /** Price impact as percentage */
  priceImpact: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetDenomRequest(): QueryGetDenomRequest {
  return { denom: "" };
}

export const QueryGetDenomRequest: MessageFns<QueryGetDenomRequest> = {
  encode(message: QueryGetDenomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetDenomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDenomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDenomRequest {
    return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
  },

  toJSON(message: QueryGetDenomRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetDenomRequest>, I>>(base?: I): QueryGetDenomRequest {
    return QueryGetDenomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetDenomRequest>, I>>(object: I): QueryGetDenomRequest {
    const message = createBaseQueryGetDenomRequest();
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryGetDenomResponse(): QueryGetDenomResponse {
  return { denom: undefined };
}

export const QueryGetDenomResponse: MessageFns<QueryGetDenomResponse> = {
  encode(message: QueryGetDenomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== undefined) {
      Denom.encode(message.denom, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetDenomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = Denom.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDenomResponse {
    return { denom: isSet(object.denom) ? Denom.fromJSON(object.denom) : undefined };
  },

  toJSON(message: QueryGetDenomResponse): unknown {
    const obj: any = {};
    if (message.denom !== undefined) {
      obj.denom = Denom.toJSON(message.denom);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetDenomResponse>, I>>(base?: I): QueryGetDenomResponse {
    return QueryGetDenomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetDenomResponse>, I>>(object: I): QueryGetDenomResponse {
    const message = createBaseQueryGetDenomResponse();
    message.denom = (object.denom !== undefined && object.denom !== null) ? Denom.fromPartial(object.denom) : undefined;
    return message;
  },
};

function createBaseQueryAllDenomRequest(): QueryAllDenomRequest {
  return { pagination: undefined };
}

export const QueryAllDenomRequest: MessageFns<QueryAllDenomRequest> = {
  encode(message: QueryAllDenomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllDenomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllDenomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllDenomRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllDenomRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllDenomRequest>, I>>(base?: I): QueryAllDenomRequest {
    return QueryAllDenomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllDenomRequest>, I>>(object: I): QueryAllDenomRequest {
    const message = createBaseQueryAllDenomRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllDenomResponse(): QueryAllDenomResponse {
  return { denom: [], pagination: undefined };
}

export const QueryAllDenomResponse: MessageFns<QueryAllDenomResponse> = {
  encode(message: QueryAllDenomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.denom) {
      Denom.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllDenomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllDenomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom.push(Denom.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllDenomResponse {
    return {
      denom: globalThis.Array.isArray(object?.denom) ? object.denom.map((e: any) => Denom.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllDenomResponse): unknown {
    const obj: any = {};
    if (message.denom?.length) {
      obj.denom = message.denom.map((e) => Denom.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllDenomResponse>, I>>(base?: I): QueryAllDenomResponse {
    return QueryAllDenomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllDenomResponse>, I>>(object: I): QueryAllDenomResponse {
    const message = createBaseQueryAllDenomResponse();
    message.denom = object.denom?.map((e) => Denom.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetBondingCurvePriceRequest(): QueryGetBondingCurvePriceRequest {
  return { denom: "" };
}

export const QueryGetBondingCurvePriceRequest: MessageFns<QueryGetBondingCurvePriceRequest> = {
  encode(message: QueryGetBondingCurvePriceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBondingCurvePriceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBondingCurvePriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBondingCurvePriceRequest {
    return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
  },

  toJSON(message: QueryGetBondingCurvePriceRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBondingCurvePriceRequest>, I>>(
    base?: I,
  ): QueryGetBondingCurvePriceRequest {
    return QueryGetBondingCurvePriceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBondingCurvePriceRequest>, I>>(
    object: I,
  ): QueryGetBondingCurvePriceRequest {
    const message = createBaseQueryGetBondingCurvePriceRequest();
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryGetBondingCurvePriceResponse(): QueryGetBondingCurvePriceResponse {
  return { price: "" };
}

export const QueryGetBondingCurvePriceResponse: MessageFns<QueryGetBondingCurvePriceResponse> = {
  encode(message: QueryGetBondingCurvePriceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== "") {
      writer.uint32(10).string(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBondingCurvePriceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBondingCurvePriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBondingCurvePriceResponse {
    return { price: isSet(object.price) ? globalThis.String(object.price) : "" };
  },

  toJSON(message: QueryGetBondingCurvePriceResponse): unknown {
    const obj: any = {};
    if (message.price !== "") {
      obj.price = message.price;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBondingCurvePriceResponse>, I>>(
    base?: I,
  ): QueryGetBondingCurvePriceResponse {
    return QueryGetBondingCurvePriceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBondingCurvePriceResponse>, I>>(
    object: I,
  ): QueryGetBondingCurvePriceResponse {
    const message = createBaseQueryGetBondingCurvePriceResponse();
    message.price = object.price ?? "";
    return message;
  },
};

function createBaseQueryGetBondingCurveProgressRequest(): QueryGetBondingCurveProgressRequest {
  return { denom: "" };
}

export const QueryGetBondingCurveProgressRequest: MessageFns<QueryGetBondingCurveProgressRequest> = {
  encode(message: QueryGetBondingCurveProgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBondingCurveProgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBondingCurveProgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBondingCurveProgressRequest {
    return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
  },

  toJSON(message: QueryGetBondingCurveProgressRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBondingCurveProgressRequest>, I>>(
    base?: I,
  ): QueryGetBondingCurveProgressRequest {
    return QueryGetBondingCurveProgressRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBondingCurveProgressRequest>, I>>(
    object: I,
  ): QueryGetBondingCurveProgressRequest {
    const message = createBaseQueryGetBondingCurveProgressRequest();
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryGetBondingCurveProgressResponse(): QueryGetBondingCurveProgressResponse {
  return { progress: "", tokensSold: Long.ZERO, tokensRemaining: Long.ZERO };
}

export const QueryGetBondingCurveProgressResponse: MessageFns<QueryGetBondingCurveProgressResponse> = {
  encode(message: QueryGetBondingCurveProgressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progress !== "") {
      writer.uint32(10).string(message.progress);
    }
    if (!message.tokensSold.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.tokensSold.toString());
    }
    if (!message.tokensRemaining.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.tokensRemaining.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGetBondingCurveProgressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetBondingCurveProgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.progress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tokensSold = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tokensRemaining = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetBondingCurveProgressResponse {
    return {
      progress: isSet(object.progress) ? globalThis.String(object.progress) : "",
      tokensSold: isSet(object.tokensSold) ? Long.fromValue(object.tokensSold) : Long.ZERO,
      tokensRemaining: isSet(object.tokensRemaining) ? Long.fromValue(object.tokensRemaining) : Long.ZERO,
    };
  },

  toJSON(message: QueryGetBondingCurveProgressResponse): unknown {
    const obj: any = {};
    if (message.progress !== "") {
      obj.progress = message.progress;
    }
    if (!message.tokensSold.equals(Long.ZERO)) {
      obj.tokensSold = (message.tokensSold || Long.ZERO).toString();
    }
    if (!message.tokensRemaining.equals(Long.ZERO)) {
      obj.tokensRemaining = (message.tokensRemaining || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGetBondingCurveProgressResponse>, I>>(
    base?: I,
  ): QueryGetBondingCurveProgressResponse {
    return QueryGetBondingCurveProgressResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGetBondingCurveProgressResponse>, I>>(
    object: I,
  ): QueryGetBondingCurveProgressResponse {
    const message = createBaseQueryGetBondingCurveProgressResponse();
    message.progress = object.progress ?? "";
    message.tokensSold = (object.tokensSold !== undefined && object.tokensSold !== null)
      ? Long.fromValue(object.tokensSold)
      : Long.ZERO;
    message.tokensRemaining = (object.tokensRemaining !== undefined && object.tokensRemaining !== null)
      ? Long.fromValue(object.tokensRemaining)
      : Long.ZERO;
    return message;
  },
};

function createBaseQueryEstimateBuyRequest(): QueryEstimateBuyRequest {
  return { denom: "", fandomAmount: Long.ZERO };
}

export const QueryEstimateBuyRequest: MessageFns<QueryEstimateBuyRequest> = {
  encode(message: QueryEstimateBuyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (!message.fandomAmount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.fandomAmount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateBuyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEstimateBuyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fandomAmount = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEstimateBuyRequest {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      fandomAmount: isSet(object.fandomAmount) ? Long.fromValue(object.fandomAmount) : Long.ZERO,
    };
  },

  toJSON(message: QueryEstimateBuyRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (!message.fandomAmount.equals(Long.ZERO)) {
      obj.fandomAmount = (message.fandomAmount || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEstimateBuyRequest>, I>>(base?: I): QueryEstimateBuyRequest {
    return QueryEstimateBuyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEstimateBuyRequest>, I>>(object: I): QueryEstimateBuyRequest {
    const message = createBaseQueryEstimateBuyRequest();
    message.denom = object.denom ?? "";
    message.fandomAmount = (object.fandomAmount !== undefined && object.fandomAmount !== null)
      ? Long.fromValue(object.fandomAmount)
      : Long.ZERO;
    return message;
  },
};

function createBaseQueryEstimateBuyResponse(): QueryEstimateBuyResponse {
  return { tokensOut: Long.ZERO, priceImpact: "" };
}

export const QueryEstimateBuyResponse: MessageFns<QueryEstimateBuyResponse> = {
  encode(message: QueryEstimateBuyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.tokensOut.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.tokensOut.toString());
    }
    if (message.priceImpact !== "") {
      writer.uint32(18).string(message.priceImpact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateBuyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEstimateBuyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.tokensOut = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.priceImpact = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEstimateBuyResponse {
    return {
      tokensOut: isSet(object.tokensOut) ? Long.fromValue(object.tokensOut) : Long.ZERO,
      priceImpact: isSet(object.priceImpact) ? globalThis.String(object.priceImpact) : "",
    };
  },

  toJSON(message: QueryEstimateBuyResponse): unknown {
    const obj: any = {};
    if (!message.tokensOut.equals(Long.ZERO)) {
      obj.tokensOut = (message.tokensOut || Long.ZERO).toString();
    }
    if (message.priceImpact !== "") {
      obj.priceImpact = message.priceImpact;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEstimateBuyResponse>, I>>(base?: I): QueryEstimateBuyResponse {
    return QueryEstimateBuyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEstimateBuyResponse>, I>>(object: I): QueryEstimateBuyResponse {
    const message = createBaseQueryEstimateBuyResponse();
    message.tokensOut = (object.tokensOut !== undefined && object.tokensOut !== null)
      ? Long.fromValue(object.tokensOut)
      : Long.ZERO;
    message.priceImpact = object.priceImpact ?? "";
    return message;
  },
};

function createBaseQueryEstimateSellRequest(): QueryEstimateSellRequest {
  return { denom: "", tokenAmount: Long.ZERO };
}

export const QueryEstimateSellRequest: MessageFns<QueryEstimateSellRequest> = {
  encode(message: QueryEstimateSellRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (!message.tokenAmount.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.tokenAmount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateSellRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEstimateSellRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tokenAmount = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEstimateSellRequest {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      tokenAmount: isSet(object.tokenAmount) ? Long.fromValue(object.tokenAmount) : Long.ZERO,
    };
  },

  toJSON(message: QueryEstimateSellRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (!message.tokenAmount.equals(Long.ZERO)) {
      obj.tokenAmount = (message.tokenAmount || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEstimateSellRequest>, I>>(base?: I): QueryEstimateSellRequest {
    return QueryEstimateSellRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEstimateSellRequest>, I>>(object: I): QueryEstimateSellRequest {
    const message = createBaseQueryEstimateSellRequest();
    message.denom = object.denom ?? "";
    message.tokenAmount = (object.tokenAmount !== undefined && object.tokenAmount !== null)
      ? Long.fromValue(object.tokenAmount)
      : Long.ZERO;
    return message;
  },
};

function createBaseQueryEstimateSellResponse(): QueryEstimateSellResponse {
  return { fandomOut: Long.ZERO, priceImpact: "" };
}

export const QueryEstimateSellResponse: MessageFns<QueryEstimateSellResponse> = {
  encode(message: QueryEstimateSellResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.fandomOut.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.fandomOut.toString());
    }
    if (message.priceImpact !== "") {
      writer.uint32(18).string(message.priceImpact);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEstimateSellResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEstimateSellResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fandomOut = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.priceImpact = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEstimateSellResponse {
    return {
      fandomOut: isSet(object.fandomOut) ? Long.fromValue(object.fandomOut) : Long.ZERO,
      priceImpact: isSet(object.priceImpact) ? globalThis.String(object.priceImpact) : "",
    };
  },

  toJSON(message: QueryEstimateSellResponse): unknown {
    const obj: any = {};
    if (!message.fandomOut.equals(Long.ZERO)) {
      obj.fandomOut = (message.fandomOut || Long.ZERO).toString();
    }
    if (message.priceImpact !== "") {
      obj.priceImpact = message.priceImpact;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEstimateSellResponse>, I>>(base?: I): QueryEstimateSellResponse {
    return QueryEstimateSellResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEstimateSellResponse>, I>>(object: I): QueryEstimateSellResponse {
    const message = createBaseQueryEstimateSellResponse();
    message.fandomOut = (object.fandomOut !== undefined && object.fandomOut !== null)
      ? Long.fromValue(object.fandomOut)
      : Long.ZERO;
    message.priceImpact = object.priceImpact ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** ListDenom Queries a list of Denom items. */
  GetDenom(request: QueryGetDenomRequest): Promise<QueryGetDenomResponse>;
  /** ListDenom defines the ListDenom RPC. */
  ListDenom(request: QueryAllDenomRequest): Promise<QueryAllDenomResponse>;
  /** GetBondingCurvePrice queries the current price of a denom in the bonding curve */
  GetBondingCurvePrice(request: QueryGetBondingCurvePriceRequest): Promise<QueryGetBondingCurvePriceResponse>;
  /** GetBondingCurveProgress queries the progress of a bonding curve */
  GetBondingCurveProgress(request: QueryGetBondingCurveProgressRequest): Promise<QueryGetBondingCurveProgressResponse>;
  /** EstimateBuy estimates how many tokens would be received for a given fandom amount */
  EstimateBuy(request: QueryEstimateBuyRequest): Promise<QueryEstimateBuyResponse>;
  /** EstimateSell estimates how many fandom tokens would be received for selling tokens */
  EstimateSell(request: QueryEstimateSellRequest): Promise<QueryEstimateSellResponse>;
}

export const QueryServiceName = "fandomchain.tokenfactory.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.GetDenom = this.GetDenom.bind(this);
    this.ListDenom = this.ListDenom.bind(this);
    this.GetBondingCurvePrice = this.GetBondingCurvePrice.bind(this);
    this.GetBondingCurveProgress = this.GetBondingCurveProgress.bind(this);
    this.EstimateBuy = this.EstimateBuy.bind(this);
    this.EstimateSell = this.EstimateSell.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  GetDenom(request: QueryGetDenomRequest): Promise<QueryGetDenomResponse> {
    const data = QueryGetDenomRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDenom", data);
    return promise.then((data) => QueryGetDenomResponse.decode(new BinaryReader(data)));
  }

  ListDenom(request: QueryAllDenomRequest): Promise<QueryAllDenomResponse> {
    const data = QueryAllDenomRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListDenom", data);
    return promise.then((data) => QueryAllDenomResponse.decode(new BinaryReader(data)));
  }

  GetBondingCurvePrice(request: QueryGetBondingCurvePriceRequest): Promise<QueryGetBondingCurvePriceResponse> {
    const data = QueryGetBondingCurvePriceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBondingCurvePrice", data);
    return promise.then((data) => QueryGetBondingCurvePriceResponse.decode(new BinaryReader(data)));
  }

  GetBondingCurveProgress(request: QueryGetBondingCurveProgressRequest): Promise<QueryGetBondingCurveProgressResponse> {
    const data = QueryGetBondingCurveProgressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetBondingCurveProgress", data);
    return promise.then((data) => QueryGetBondingCurveProgressResponse.decode(new BinaryReader(data)));
  }

  EstimateBuy(request: QueryEstimateBuyRequest): Promise<QueryEstimateBuyResponse> {
    const data = QueryEstimateBuyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EstimateBuy", data);
    return promise.then((data) => QueryEstimateBuyResponse.decode(new BinaryReader(data)));
  }

  EstimateSell(request: QueryEstimateSellRequest): Promise<QueryEstimateSellResponse> {
    const data = QueryEstimateSellRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EstimateSell", data);
    return promise.then((data) => QueryEstimateSellResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
